
Aplicacion 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a04  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bb0  08000bb0  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bb0  08000bb0  00002014  2**0
                  CONTENTS
  4 .ARM          00000000  08000bb0  08000bb0  00002014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bb0  08000bb0  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bb0  08000bb0  00001bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000bb4  08000bb4  00001bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08000bb8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002014  2**0
                  CONTENTS
 10 .bss          00000024  20000014  20000014  00002014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00002014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000412e  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cea  00000000  00000000  00006172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c0  00000000  00000000  00006e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b0  00000000  00000000  00007220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230b1  00000000  00000000  000074d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000046fd  00000000  00000000  0002a581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6916  00000000  00000000  0002ec7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105594  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d2c  00000000  00000000  001055d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00106304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000b98 	.word	0x08000b98

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08000b98 	.word	0x08000b98

080001ec <Configuracion_Leds_Boton>:
uint8_t tiempo_actual = 1;  // Inicia con el tiempo 1
uint32_t delay_tiempo = 100;  // Tiempo de alternancia inicial en ms
uint8_t boton_presionado = 0;

// Función para configurar LEDs y el botón
void Configuracion_Leds_Boton(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Habilitar reloj para GPIOB
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	4b20      	ldr	r3, [pc, #128]	@ (8000278 <Configuracion_Leds_Boton+0x8c>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000278 <Configuracion_Leds_Boton+0x8c>)
 80001fc:	f043 0302 	orr.w	r3, r3, #2
 8000200:	6313      	str	r3, [r2, #48]	@ 0x30
 8000202:	4b1d      	ldr	r3, [pc, #116]	@ (8000278 <Configuracion_Leds_Boton+0x8c>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000206:	f003 0302 	and.w	r3, r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Habilitar reloj para GPIOC (botón)
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	4b19      	ldr	r3, [pc, #100]	@ (8000278 <Configuracion_Leds_Boton+0x8c>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000216:	4a18      	ldr	r2, [pc, #96]	@ (8000278 <Configuracion_Leds_Boton+0x8c>)
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	6313      	str	r3, [r2, #48]	@ 0x30
 800021e:	4b16      	ldr	r3, [pc, #88]	@ (8000278 <Configuracion_Leds_Boton+0x8c>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	f003 0304 	and.w	r3, r3, #4
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 030c 	add.w	r3, r7, #12
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

    // Configuración de los LEDs como salida
    GPIO_InitStruct.Pin = LED1_PIN | LED2_PIN | LED3_PIN;
 800023a:	2307      	movs	r3, #7
 800023c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	4619      	mov	r1, r3
 8000250:	480a      	ldr	r0, [pc, #40]	@ (800027c <Configuracion_Leds_Boton+0x90>)
 8000252:	f000 fa9f 	bl	8000794 <HAL_GPIO_Init>

    // Configuración del botón como entrada
    GPIO_InitStruct.Pin = GPIO_PIN_13;  // Botón onboard (PA0 o PC13 según la placa)
 8000256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800025a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800025c:	2300      	movs	r3, #0
 800025e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000264:	f107 030c 	add.w	r3, r7, #12
 8000268:	4619      	mov	r1, r3
 800026a:	4805      	ldr	r0, [pc, #20]	@ (8000280 <Configuracion_Leds_Boton+0x94>)
 800026c:	f000 fa92 	bl	8000794 <HAL_GPIO_Init>
}
 8000270:	bf00      	nop
 8000272:	3720      	adds	r7, #32
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40023800 	.word	0x40023800
 800027c:	40020400 	.word	0x40020400
 8000280:	40020800 	.word	0x40020800

08000284 <Cambiar_Tiempo>:

// Función para cambiar los tiempos de alternancia
void Cambiar_Tiempo(void) {
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
    // Avanza al siguiente tiempo
    tiempo_actual++;
 8000288:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <Cambiar_Tiempo+0x70>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <Cambiar_Tiempo+0x70>)
 8000292:	701a      	strb	r2, [r3, #0]
    if (tiempo_actual > 4) {
 8000294:	4b17      	ldr	r3, [pc, #92]	@ (80002f4 <Cambiar_Tiempo+0x70>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b04      	cmp	r3, #4
 800029a:	d902      	bls.n	80002a2 <Cambiar_Tiempo+0x1e>
        tiempo_actual = 1;  // Reinicia al tiempo 1
 800029c:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <Cambiar_Tiempo+0x70>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
    }

    // Establecer el tiempo de alternancia según la secuencia
    switch (tiempo_actual) {
 80002a2:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <Cambiar_Tiempo+0x70>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	3b01      	subs	r3, #1
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d81d      	bhi.n	80002e8 <Cambiar_Tiempo+0x64>
 80002ac:	a201      	add	r2, pc, #4	@ (adr r2, 80002b4 <Cambiar_Tiempo+0x30>)
 80002ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b2:	bf00      	nop
 80002b4:	080002c5 	.word	0x080002c5
 80002b8:	080002cd 	.word	0x080002cd
 80002bc:	080002d5 	.word	0x080002d5
 80002c0:	080002df 	.word	0x080002df
        case 1:
            delay_tiempo = 100;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <Cambiar_Tiempo+0x74>)
 80002c6:	2264      	movs	r2, #100	@ 0x64
 80002c8:	601a      	str	r2, [r3, #0]
            break;
 80002ca:	e00e      	b.n	80002ea <Cambiar_Tiempo+0x66>
        case 2:
            delay_tiempo = 250;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <Cambiar_Tiempo+0x74>)
 80002ce:	22fa      	movs	r2, #250	@ 0xfa
 80002d0:	601a      	str	r2, [r3, #0]
            break;
 80002d2:	e00a      	b.n	80002ea <Cambiar_Tiempo+0x66>
        case 3:
            delay_tiempo = 500;
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <Cambiar_Tiempo+0x74>)
 80002d6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002da:	601a      	str	r2, [r3, #0]
            break;
 80002dc:	e005      	b.n	80002ea <Cambiar_Tiempo+0x66>
        case 4:
            delay_tiempo = 1000;
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <Cambiar_Tiempo+0x74>)
 80002e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002e4:	601a      	str	r2, [r3, #0]
            break;
 80002e6:	e000      	b.n	80002ea <Cambiar_Tiempo+0x66>
        default:
            break;
 80002e8:	bf00      	nop
    }
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	20000000 	.word	0x20000000
 80002f8:	20000004 	.word	0x20000004

080002fc <Parpadeo_LEDs>:

// Función principal de parpadeo de LEDs
void Parpadeo_LEDs(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_PORT, LED1_PIN | LED2_PIN | LED3_PIN);  // Parpadeo simultáneo
 8000300:	2107      	movs	r1, #7
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <Parpadeo_LEDs+0x1c>)
 8000304:	f000 fc0a 	bl	8000b1c <HAL_GPIO_TogglePin>
    HAL_Delay(delay_tiempo);
 8000308:	4b04      	ldr	r3, [pc, #16]	@ (800031c <Parpadeo_LEDs+0x20>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f937 	bl	8000580 <HAL_Delay>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40020400 	.word	0x40020400
 800031c:	20000004 	.word	0x20000004

08000320 <main>:

// Función principal
int main(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
    HAL_Init();
 8000324:	f000 f8ba 	bl	800049c <HAL_Init>
    Configuracion_Leds_Boton();
 8000328:	f7ff ff60 	bl	80001ec <Configuracion_Leds_Boton>

    while (1) {
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && !boton_presionado) {
 800032c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000330:	480e      	ldr	r0, [pc, #56]	@ (800036c <main+0x4c>)
 8000332:	f000 fbdb 	bl	8000aec <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d109      	bne.n	8000350 <main+0x30>
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <main+0x50>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d105      	bne.n	8000350 <main+0x30>
            // Si el botón es presionado (nivel bajo), cambiar tiempo
            Cambiar_Tiempo();
 8000344:	f7ff ff9e 	bl	8000284 <Cambiar_Tiempo>
            boton_presionado = 1;
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <main+0x50>)
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	e00a      	b.n	8000366 <main+0x46>
        } else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000350:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000354:	4805      	ldr	r0, [pc, #20]	@ (800036c <main+0x4c>)
 8000356:	f000 fbc9 	bl	8000aec <HAL_GPIO_ReadPin>
 800035a:	4603      	mov	r3, r0
 800035c:	2b01      	cmp	r3, #1
 800035e:	d102      	bne.n	8000366 <main+0x46>
            boton_presionado = 0;  // Resetear cuando se suelte el botón
 8000360:	4b03      	ldr	r3, [pc, #12]	@ (8000370 <main+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
        }

        Parpadeo_LEDs();  // Ejecutar el parpadeo según el tiempo actual
 8000366:	f7ff ffc9 	bl	80002fc <Parpadeo_LEDs>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && !boton_presionado) {
 800036a:	e7df      	b.n	800032c <main+0xc>
 800036c:	40020800 	.word	0x40020800
 8000370:	20000030 	.word	0x20000030

08000374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <HAL_MspInit+0x4c>)
 8000380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000382:	4a0f      	ldr	r2, [pc, #60]	@ (80003c0 <HAL_MspInit+0x4c>)
 8000384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000388:	6453      	str	r3, [r2, #68]	@ 0x44
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <HAL_MspInit+0x4c>)
 800038c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800038e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	2300      	movs	r3, #0
 8000398:	603b      	str	r3, [r7, #0]
 800039a:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <HAL_MspInit+0x4c>)
 800039c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800039e:	4a08      	ldr	r2, [pc, #32]	@ (80003c0 <HAL_MspInit+0x4c>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80003a6:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <HAL_MspInit+0x4c>)
 80003a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40023800 	.word	0x40023800

080003c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <NMI_Handler+0x4>

080003cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <HardFault_Handler+0x4>

080003d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <MemManage_Handler+0x4>

080003dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041a:	f000 f891 	bl	8000540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <SystemInit+0x20>)
 800042a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800042e:	4a05      	ldr	r2, [pc, #20]	@ (8000444 <SystemInit+0x20>)
 8000430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800044c:	f7ff ffea 	bl	8000424 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	@ (8000484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	@ (8000488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	@ (800048c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	@ (8000494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000476:	f000 fb6b 	bl	8000b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800047a:	f7ff ff51 	bl	8000320 <main>
  bx  lr    
 800047e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000480:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800048c:	08000bb8 	.word	0x08000bb8
  ldr r2, =_sbss
 8000490:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000494:	20000038 	.word	0x20000038

08000498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC_IRQHandler>
	...

0800049c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <HAL_Init+0x40>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <HAL_Init+0x40>)
 80004a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ac:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <HAL_Init+0x40>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0a      	ldr	r2, [pc, #40]	@ (80004dc <HAL_Init+0x40>)
 80004b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b8:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <HAL_Init+0x40>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a07      	ldr	r2, [pc, #28]	@ (80004dc <HAL_Init+0x40>)
 80004be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c4:	2003      	movs	r0, #3
 80004c6:	f000 f931 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 f808 	bl	80004e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004d0:	f7ff ff50 	bl	8000374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40023c00 	.word	0x40023c00

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <HAL_InitTick+0x54>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_InitTick+0x58>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f93b 	bl	800077a <HAL_SYSTICK_Config>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	e00e      	b.n	800052c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b0f      	cmp	r3, #15
 8000512:	d80a      	bhi.n	800052a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000514:	2200      	movs	r2, #0
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	f04f 30ff 	mov.w	r0, #4294967295
 800051c:	f000 f911 	bl	8000742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <HAL_InitTick+0x5c>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000526:	2300      	movs	r3, #0
 8000528:	e000      	b.n	800052c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000008 	.word	0x20000008
 8000538:	20000010 	.word	0x20000010
 800053c:	2000000c 	.word	0x2000000c

08000540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_IncTick+0x20>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <HAL_IncTick+0x24>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4413      	add	r3, r2
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <HAL_IncTick+0x24>)
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000010 	.word	0x20000010
 8000564:	20000034 	.word	0x20000034

08000568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return uwTick;
 800056c:	4b03      	ldr	r3, [pc, #12]	@ (800057c <HAL_GetTick+0x14>)
 800056e:	681b      	ldr	r3, [r3, #0]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000034 	.word	0x20000034

08000580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff ffee 	bl	8000568 <HAL_GetTick>
 800058c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000598:	d005      	beq.n	80005a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <HAL_Delay+0x44>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4413      	add	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005a6:	bf00      	nop
 80005a8:	f7ff ffde 	bl	8000568 <HAL_GetTick>
 80005ac:	4602      	mov	r2, r0
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8f7      	bhi.n	80005a8 <HAL_Delay+0x28>
  {
  }
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000010 	.word	0x20000010

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	@ (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db0a      	blt.n	8000656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	490c      	ldr	r1, [pc, #48]	@ (8000678 <__NVIC_SetPriority+0x4c>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	0112      	lsls	r2, r2, #4
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	440b      	add	r3, r1
 8000650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000654:	e00a      	b.n	800066c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4908      	ldr	r1, [pc, #32]	@ (800067c <__NVIC_SetPriority+0x50>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	3b04      	subs	r3, #4
 8000664:	0112      	lsls	r2, r2, #4
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	440b      	add	r3, r1
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	@ 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43da      	mvns	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	401a      	ands	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43d9      	mvns	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	4313      	orrs	r3, r2
         );
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	@ 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006f8:	d301      	bcc.n	80006fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00f      	b.n	800071e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <SysTick_Config+0x40>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000706:	210f      	movs	r1, #15
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f7ff ff8e 	bl	800062c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <SysTick_Config+0x40>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <SysTick_Config+0x40>)
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010

0800072c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff47 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000754:	f7ff ff5c 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff ff8e 	bl	8000680 <NVIC_EncodePriority>
 8000764:	4602      	mov	r2, r0
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff5d 	bl	800062c <__NVIC_SetPriority>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ffb0 	bl	80006e8 <SysTick_Config>
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	@ 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	e177      	b.n	8000aa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007b0:	2201      	movs	r2, #1
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	f040 8166 	bne.w	8000a9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d005      	beq.n	80007e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d130      	bne.n	8000848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	2203      	movs	r2, #3
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	4013      	ands	r3, r2
 80007fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	4313      	orrs	r3, r2
 800080e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800081c:	2201      	movs	r2, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	4013      	ands	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	091b      	lsrs	r3, r3, #4
 8000832:	f003 0201 	and.w	r2, r3, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4313      	orrs	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	2b03      	cmp	r3, #3
 8000852:	d017      	beq.n	8000884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	2203      	movs	r2, #3
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	4013      	ands	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4313      	orrs	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	2b02      	cmp	r3, #2
 800088e:	d123      	bne.n	80008d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	08da      	lsrs	r2, r3, #3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3208      	adds	r2, #8
 8000898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	220f      	movs	r2, #15
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	691a      	ldr	r2, [r3, #16]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	08da      	lsrs	r2, r3, #3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3208      	adds	r2, #8
 80008d2:	69b9      	ldr	r1, [r7, #24]
 80008d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	2203      	movs	r2, #3
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 0203 	and.w	r2, r3, #3
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000914:	2b00      	cmp	r3, #0
 8000916:	f000 80c0 	beq.w	8000a9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b66      	ldr	r3, [pc, #408]	@ (8000ab8 <HAL_GPIO_Init+0x324>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	4a65      	ldr	r2, [pc, #404]	@ (8000ab8 <HAL_GPIO_Init+0x324>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000928:	6453      	str	r3, [r2, #68]	@ 0x44
 800092a:	4b63      	ldr	r3, [pc, #396]	@ (8000ab8 <HAL_GPIO_Init+0x324>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000936:	4a61      	ldr	r2, [pc, #388]	@ (8000abc <HAL_GPIO_Init+0x328>)
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	3302      	adds	r3, #2
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	220f      	movs	r2, #15
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4013      	ands	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a58      	ldr	r2, [pc, #352]	@ (8000ac0 <HAL_GPIO_Init+0x32c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d037      	beq.n	80009d2 <HAL_GPIO_Init+0x23e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a57      	ldr	r2, [pc, #348]	@ (8000ac4 <HAL_GPIO_Init+0x330>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d031      	beq.n	80009ce <HAL_GPIO_Init+0x23a>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a56      	ldr	r2, [pc, #344]	@ (8000ac8 <HAL_GPIO_Init+0x334>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d02b      	beq.n	80009ca <HAL_GPIO_Init+0x236>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a55      	ldr	r2, [pc, #340]	@ (8000acc <HAL_GPIO_Init+0x338>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d025      	beq.n	80009c6 <HAL_GPIO_Init+0x232>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a54      	ldr	r2, [pc, #336]	@ (8000ad0 <HAL_GPIO_Init+0x33c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d01f      	beq.n	80009c2 <HAL_GPIO_Init+0x22e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a53      	ldr	r2, [pc, #332]	@ (8000ad4 <HAL_GPIO_Init+0x340>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d019      	beq.n	80009be <HAL_GPIO_Init+0x22a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a52      	ldr	r2, [pc, #328]	@ (8000ad8 <HAL_GPIO_Init+0x344>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d013      	beq.n	80009ba <HAL_GPIO_Init+0x226>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a51      	ldr	r2, [pc, #324]	@ (8000adc <HAL_GPIO_Init+0x348>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d00d      	beq.n	80009b6 <HAL_GPIO_Init+0x222>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a50      	ldr	r2, [pc, #320]	@ (8000ae0 <HAL_GPIO_Init+0x34c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d007      	beq.n	80009b2 <HAL_GPIO_Init+0x21e>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4f      	ldr	r2, [pc, #316]	@ (8000ae4 <HAL_GPIO_Init+0x350>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_GPIO_Init+0x21a>
 80009aa:	2309      	movs	r3, #9
 80009ac:	e012      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009ae:	230a      	movs	r3, #10
 80009b0:	e010      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009b2:	2308      	movs	r3, #8
 80009b4:	e00e      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009b6:	2307      	movs	r3, #7
 80009b8:	e00c      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009ba:	2306      	movs	r3, #6
 80009bc:	e00a      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009be:	2305      	movs	r3, #5
 80009c0:	e008      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009c2:	2304      	movs	r3, #4
 80009c4:	e006      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009c6:	2303      	movs	r3, #3
 80009c8:	e004      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009ca:	2302      	movs	r3, #2
 80009cc:	e002      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009ce:	2301      	movs	r3, #1
 80009d0:	e000      	b.n	80009d4 <HAL_GPIO_Init+0x240>
 80009d2:	2300      	movs	r3, #0
 80009d4:	69fa      	ldr	r2, [r7, #28]
 80009d6:	f002 0203 	and.w	r2, r2, #3
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	4093      	lsls	r3, r2
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009e4:	4935      	ldr	r1, [pc, #212]	@ (8000abc <HAL_GPIO_Init+0x328>)
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae8 <HAL_GPIO_Init+0x354>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	4013      	ands	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a16:	4a34      	ldr	r2, [pc, #208]	@ (8000ae8 <HAL_GPIO_Init+0x354>)
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	@ (8000ae8 <HAL_GPIO_Init+0x354>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a40:	4a29      	ldr	r2, [pc, #164]	@ (8000ae8 <HAL_GPIO_Init+0x354>)
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a46:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <HAL_GPIO_Init+0x354>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <HAL_GPIO_Init+0x354>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <HAL_GPIO_Init+0x354>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a94:	4a14      	ldr	r2, [pc, #80]	@ (8000ae8 <HAL_GPIO_Init+0x354>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	f67f ae84 	bls.w	80007b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3724      	adds	r7, #36	@ 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40013800 	.word	0x40013800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40021400 	.word	0x40021400
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40021c00 	.word	0x40021c00
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	40022400 	.word	0x40022400
 8000ae8:	40013c00 	.word	0x40013c00

08000aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	691a      	ldr	r2, [r3, #16]
 8000afc:	887b      	ldrh	r3, [r7, #2]
 8000afe:	4013      	ands	r3, r2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e001      	b.n	8000b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4013      	ands	r3, r2
 8000b34:	041a      	lsls	r2, r3, #16
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	43d9      	mvns	r1, r3
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	400b      	ands	r3, r1
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	619a      	str	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <__libc_init_array>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	4d0d      	ldr	r5, [pc, #52]	@ (8000b88 <__libc_init_array+0x38>)
 8000b54:	4c0d      	ldr	r4, [pc, #52]	@ (8000b8c <__libc_init_array+0x3c>)
 8000b56:	1b64      	subs	r4, r4, r5
 8000b58:	10a4      	asrs	r4, r4, #2
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	42a6      	cmp	r6, r4
 8000b5e:	d109      	bne.n	8000b74 <__libc_init_array+0x24>
 8000b60:	4d0b      	ldr	r5, [pc, #44]	@ (8000b90 <__libc_init_array+0x40>)
 8000b62:	4c0c      	ldr	r4, [pc, #48]	@ (8000b94 <__libc_init_array+0x44>)
 8000b64:	f000 f818 	bl	8000b98 <_init>
 8000b68:	1b64      	subs	r4, r4, r5
 8000b6a:	10a4      	asrs	r4, r4, #2
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	42a6      	cmp	r6, r4
 8000b70:	d105      	bne.n	8000b7e <__libc_init_array+0x2e>
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b78:	4798      	blx	r3
 8000b7a:	3601      	adds	r6, #1
 8000b7c:	e7ee      	b.n	8000b5c <__libc_init_array+0xc>
 8000b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b82:	4798      	blx	r3
 8000b84:	3601      	adds	r6, #1
 8000b86:	e7f2      	b.n	8000b6e <__libc_init_array+0x1e>
 8000b88:	08000bb0 	.word	0x08000bb0
 8000b8c:	08000bb0 	.word	0x08000bb0
 8000b90:	08000bb0 	.word	0x08000bb0
 8000b94:	08000bb4 	.word	0x08000bb4

08000b98 <_init>:
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	bf00      	nop
 8000b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9e:	bc08      	pop	{r3}
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	4770      	bx	lr

08000ba4 <_fini>:
 8000ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba6:	bf00      	nop
 8000ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000baa:	bc08      	pop	{r3}
 8000bac:	469e      	mov	lr, r3
 8000bae:	4770      	bx	lr
