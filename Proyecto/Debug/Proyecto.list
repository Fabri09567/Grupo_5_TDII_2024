
Proyecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004638  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080047e8  080047e8  000057e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004858  08004858  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004858  08004858  00005858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004860  08004860  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004868  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000601c  2**0
                  CONTENTS
 10 .bss          00000168  2000001c  2000001c  0000601c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  0000601c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001255a  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002db3  00000000  00000000  000185a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0001b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da3  00000000  00000000  0001c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025119  00000000  00000000  0001d293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b51  00000000  00000000  000423ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db393  00000000  00000000  00059efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135290  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000488c  00000000  00000000  001352d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00139b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080047d0 	.word	0x080047d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	080047d0 	.word	0x080047d0

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b96a 	b.w	8000cb8 <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	460c      	mov	r4, r1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d14e      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a08:	4694      	mov	ip, r2
 8000a0a:	458c      	cmp	ip, r1
 8000a0c:	4686      	mov	lr, r0
 8000a0e:	fab2 f282 	clz	r2, r2
 8000a12:	d962      	bls.n	8000ada <__udivmoddi4+0xde>
 8000a14:	b14a      	cbz	r2, 8000a2a <__udivmoddi4+0x2e>
 8000a16:	f1c2 0320 	rsb	r3, r2, #32
 8000a1a:	4091      	lsls	r1, r2
 8000a1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a24:	4319      	orrs	r1, r3
 8000a26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2e:	fa1f f68c 	uxth.w	r6, ip
 8000a32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a42:	fb04 f106 	mul.w	r1, r4, r6
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a52:	f080 8112 	bcs.w	8000c7a <__udivmoddi4+0x27e>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 810f 	bls.w	8000c7a <__udivmoddi4+0x27e>
 8000a5c:	3c02      	subs	r4, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a59      	subs	r1, r3, r1
 8000a62:	fa1f f38e 	uxth.w	r3, lr
 8000a66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb00 f606 	mul.w	r6, r0, r6
 8000a76:	429e      	cmp	r6, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x94>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a82:	f080 80fc 	bcs.w	8000c7e <__udivmoddi4+0x282>
 8000a86:	429e      	cmp	r6, r3
 8000a88:	f240 80f9 	bls.w	8000c7e <__udivmoddi4+0x282>
 8000a8c:	4463      	add	r3, ip
 8000a8e:	3802      	subs	r0, #2
 8000a90:	1b9b      	subs	r3, r3, r6
 8000a92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a96:	2100      	movs	r1, #0
 8000a98:	b11d      	cbz	r5, 8000aa2 <__udivmoddi4+0xa6>
 8000a9a:	40d3      	lsrs	r3, r2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d905      	bls.n	8000ab6 <__udivmoddi4+0xba>
 8000aaa:	b10d      	cbz	r5, 8000ab0 <__udivmoddi4+0xb4>
 8000aac:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	e7f5      	b.n	8000aa2 <__udivmoddi4+0xa6>
 8000ab6:	fab3 f183 	clz	r1, r3
 8000aba:	2900      	cmp	r1, #0
 8000abc:	d146      	bne.n	8000b4c <__udivmoddi4+0x150>
 8000abe:	42a3      	cmp	r3, r4
 8000ac0:	d302      	bcc.n	8000ac8 <__udivmoddi4+0xcc>
 8000ac2:	4290      	cmp	r0, r2
 8000ac4:	f0c0 80f0 	bcc.w	8000ca8 <__udivmoddi4+0x2ac>
 8000ac8:	1a86      	subs	r6, r0, r2
 8000aca:	eb64 0303 	sbc.w	r3, r4, r3
 8000ace:	2001      	movs	r0, #1
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d0e6      	beq.n	8000aa2 <__udivmoddi4+0xa6>
 8000ad4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad8:	e7e3      	b.n	8000aa2 <__udivmoddi4+0xa6>
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	f040 8090 	bne.w	8000c00 <__udivmoddi4+0x204>
 8000ae0:	eba1 040c 	sub.w	r4, r1, ip
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa1f f78c 	uxth.w	r7, ip
 8000aec:	2101      	movs	r1, #1
 8000aee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000af2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000af6:	fb08 4416 	mls	r4, r8, r6, r4
 8000afa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000afe:	fb07 f006 	mul.w	r0, r7, r6
 8000b02:	4298      	cmp	r0, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x11c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x11a>
 8000b10:	4298      	cmp	r0, r3
 8000b12:	f200 80cd 	bhi.w	8000cb0 <__udivmoddi4+0x2b4>
 8000b16:	4626      	mov	r6, r4
 8000b18:	1a1c      	subs	r4, r3, r0
 8000b1a:	fa1f f38e 	uxth.w	r3, lr
 8000b1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b22:	fb08 4410 	mls	r4, r8, r0, r4
 8000b26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b2a:	fb00 f707 	mul.w	r7, r0, r7
 8000b2e:	429f      	cmp	r7, r3
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x148>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b3a:	d202      	bcs.n	8000b42 <__udivmoddi4+0x146>
 8000b3c:	429f      	cmp	r7, r3
 8000b3e:	f200 80b0 	bhi.w	8000ca2 <__udivmoddi4+0x2a6>
 8000b42:	4620      	mov	r0, r4
 8000b44:	1bdb      	subs	r3, r3, r7
 8000b46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b4a:	e7a5      	b.n	8000a98 <__udivmoddi4+0x9c>
 8000b4c:	f1c1 0620 	rsb	r6, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 f706 	lsr.w	r7, r2, r6
 8000b56:	431f      	orrs	r7, r3
 8000b58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b60:	ea43 030c 	orr.w	r3, r3, ip
 8000b64:	40f4      	lsrs	r4, r6
 8000b66:	fa00 f801 	lsl.w	r8, r0, r1
 8000b6a:	0c38      	lsrs	r0, r7, #16
 8000b6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b70:	fbb4 fef0 	udiv	lr, r4, r0
 8000b74:	fa1f fc87 	uxth.w	ip, r7
 8000b78:	fb00 441e 	mls	r4, r0, lr, r4
 8000b7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b80:	fb0e f90c 	mul.w	r9, lr, ip
 8000b84:	45a1      	cmp	r9, r4
 8000b86:	fa02 f201 	lsl.w	r2, r2, r1
 8000b8a:	d90a      	bls.n	8000ba2 <__udivmoddi4+0x1a6>
 8000b8c:	193c      	adds	r4, r7, r4
 8000b8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b92:	f080 8084 	bcs.w	8000c9e <__udivmoddi4+0x2a2>
 8000b96:	45a1      	cmp	r9, r4
 8000b98:	f240 8081 	bls.w	8000c9e <__udivmoddi4+0x2a2>
 8000b9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	eba4 0409 	sub.w	r4, r4, r9
 8000ba6:	fa1f f983 	uxth.w	r9, r3
 8000baa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bae:	fb00 4413 	mls	r4, r0, r3, r4
 8000bb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bba:	45a4      	cmp	ip, r4
 8000bbc:	d907      	bls.n	8000bce <__udivmoddi4+0x1d2>
 8000bbe:	193c      	adds	r4, r7, r4
 8000bc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bc4:	d267      	bcs.n	8000c96 <__udivmoddi4+0x29a>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	d965      	bls.n	8000c96 <__udivmoddi4+0x29a>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	443c      	add	r4, r7
 8000bce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bd6:	eba4 040c 	sub.w	r4, r4, ip
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	46ce      	mov	lr, r9
 8000bde:	469c      	mov	ip, r3
 8000be0:	d351      	bcc.n	8000c86 <__udivmoddi4+0x28a>
 8000be2:	d04e      	beq.n	8000c82 <__udivmoddi4+0x286>
 8000be4:	b155      	cbz	r5, 8000bfc <__udivmoddi4+0x200>
 8000be6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bea:	eb64 040c 	sbc.w	r4, r4, ip
 8000bee:	fa04 f606 	lsl.w	r6, r4, r6
 8000bf2:	40cb      	lsrs	r3, r1
 8000bf4:	431e      	orrs	r6, r3
 8000bf6:	40cc      	lsrs	r4, r1
 8000bf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	e750      	b.n	8000aa2 <__udivmoddi4+0xa6>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f103 	lsr.w	r1, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c10:	4094      	lsls	r4, r2
 8000c12:	430c      	orrs	r4, r1
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1c:	fa1f f78c 	uxth.w	r7, ip
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3110 	mls	r1, r8, r0, r3
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb00 f107 	mul.w	r1, r0, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x24c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c3e:	d22c      	bcs.n	8000c9a <__udivmoddi4+0x29e>
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d92a      	bls.n	8000c9a <__udivmoddi4+0x29e>
 8000c44:	3802      	subs	r0, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c50:	fb08 3311 	mls	r3, r8, r1, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb01 f307 	mul.w	r3, r1, r7
 8000c5c:	42a3      	cmp	r3, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x276>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c68:	d213      	bcs.n	8000c92 <__udivmoddi4+0x296>
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	d911      	bls.n	8000c92 <__udivmoddi4+0x296>
 8000c6e:	3902      	subs	r1, #2
 8000c70:	4464      	add	r4, ip
 8000c72:	1ae4      	subs	r4, r4, r3
 8000c74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c78:	e739      	b.n	8000aee <__udivmoddi4+0xf2>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	e6f0      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e706      	b.n	8000a90 <__udivmoddi4+0x94>
 8000c82:	45c8      	cmp	r8, r9
 8000c84:	d2ae      	bcs.n	8000be4 <__udivmoddi4+0x1e8>
 8000c86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c8e:	3801      	subs	r0, #1
 8000c90:	e7a8      	b.n	8000be4 <__udivmoddi4+0x1e8>
 8000c92:	4631      	mov	r1, r6
 8000c94:	e7ed      	b.n	8000c72 <__udivmoddi4+0x276>
 8000c96:	4603      	mov	r3, r0
 8000c98:	e799      	b.n	8000bce <__udivmoddi4+0x1d2>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e7d4      	b.n	8000c48 <__udivmoddi4+0x24c>
 8000c9e:	46d6      	mov	lr, sl
 8000ca0:	e77f      	b.n	8000ba2 <__udivmoddi4+0x1a6>
 8000ca2:	4463      	add	r3, ip
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	e74d      	b.n	8000b44 <__udivmoddi4+0x148>
 8000ca8:	4606      	mov	r6, r0
 8000caa:	4623      	mov	r3, r4
 8000cac:	4608      	mov	r0, r1
 8000cae:	e70f      	b.n	8000ad0 <__udivmoddi4+0xd4>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	e730      	b.n	8000b18 <__udivmoddi4+0x11c>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000cc6:	4a38      	ldr	r2, [pc, #224]	@ (8000da8 <HD44780_Init+0xec>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000ccc:	4b37      	ldr	r3, [pc, #220]	@ (8000dac <HD44780_Init+0xf0>)
 8000cce:	2208      	movs	r2, #8
 8000cd0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000cd2:	4b37      	ldr	r3, [pc, #220]	@ (8000db0 <HD44780_Init+0xf4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000cd8:	4b33      	ldr	r3, [pc, #204]	@ (8000da8 <HD44780_Init+0xec>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d907      	bls.n	8000cf0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000ce0:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <HD44780_Init+0xf4>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b31      	ldr	r3, [pc, #196]	@ (8000db0 <HD44780_Init+0xf4>)
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e006      	b.n	8000cfe <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <HD44780_Init+0xf4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000db0 <HD44780_Init+0xf4>)
 8000cfc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000cfe:	f000 f985 	bl	800100c <DelayInit>
  HAL_Delay(50);
 8000d02:	2032      	movs	r0, #50	@ 0x32
 8000d04:	f001 f946 	bl	8001f94 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <HD44780_Init+0xf0>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f943 	bl	8000f98 <ExpanderWrite>
  HAL_Delay(1000);
 8000d12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d16:	f001 f93d 	bl	8001f94 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000d1a:	2030      	movs	r0, #48	@ 0x30
 8000d1c:	f000 f92b 	bl	8000f76 <Write4Bits>
  DelayUS(4500);
 8000d20:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d24:	f000 f99c 	bl	8001060 <DelayUS>

  Write4Bits(0x03 << 4);
 8000d28:	2030      	movs	r0, #48	@ 0x30
 8000d2a:	f000 f924 	bl	8000f76 <Write4Bits>
  DelayUS(4500);
 8000d2e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d32:	f000 f995 	bl	8001060 <DelayUS>

  Write4Bits(0x03 << 4);
 8000d36:	2030      	movs	r0, #48	@ 0x30
 8000d38:	f000 f91d 	bl	8000f76 <Write4Bits>
  DelayUS(4500);
 8000d3c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d40:	f000 f98e 	bl	8001060 <DelayUS>

  Write4Bits(0x02 << 4);
 8000d44:	2020      	movs	r0, #32
 8000d46:	f000 f916 	bl	8000f76 <Write4Bits>
  DelayUS(100);
 8000d4a:	2064      	movs	r0, #100	@ 0x64
 8000d4c:	f000 f988 	bl	8001060 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <HD44780_Init+0xf4>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f8ce 	bl	8000efc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <HD44780_Init+0xf8>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000d66:	f000 f875 	bl	8000e54 <HD44780_Display>
  HD44780_Clear();
 8000d6a:	f000 f82b 	bl	8000dc4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HD44780_Init+0xfc>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000d74:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <HD44780_Init+0xfc>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f8bc 	bl	8000efc <SendCommand>
  DelayUS(4500);
 8000d84:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d88:	f000 f96a 	bl	8001060 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000d8c:	490b      	ldr	r1, [pc, #44]	@ (8000dbc <HD44780_Init+0x100>)
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f876 	bl	8000e80 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000d94:	490a      	ldr	r1, [pc, #40]	@ (8000dc0 <HD44780_Init+0x104>)
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 f872 	bl	8000e80 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000d9c:	f000 f81d 	bl	8000dda <HD44780_Home>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000003b 	.word	0x2000003b
 8000dac:	2000003c 	.word	0x2000003c
 8000db0:	20000038 	.word	0x20000038
 8000db4:	20000039 	.word	0x20000039
 8000db8:	2000003a 	.word	0x2000003a
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <HD44780_Clear>:

void HD44780_Clear()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f000 f897 	bl	8000efc <SendCommand>
  DelayUS(2000);
 8000dce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dd2:	f000 f945 	bl	8001060 <DelayUS>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HD44780_Home>:

void HD44780_Home()
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f000 f88c 	bl	8000efc <SendCommand>
  DelayUS(2000);
 8000de4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000de8:	f000 f93a 	bl	8001060 <DelayUS>
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HD44780_SetCursor+0x5c>)
 8000e02:	f107 0408 	add.w	r4, r7, #8
 8000e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <HD44780_SetCursor+0x60>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	79ba      	ldrb	r2, [r7, #6]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d303      	bcc.n	8000e1e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HD44780_SetCursor+0x60>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	3318      	adds	r3, #24
 8000e24:	443b      	add	r3, r7
 8000e26:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f85d 	bl	8000efc <SendCommand>
}
 8000e42:	bf00      	nop
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd90      	pop	{r4, r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	080047e8 	.word	0x080047e8
 8000e50:	2000003b 	.word	0x2000003b

08000e54 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <HD44780_Display+0x28>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HD44780_Display+0x28>)
 8000e64:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e66:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HD44780_Display+0x28>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f843 	bl	8000efc <SendCommand>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000039 	.word	0x20000039

08000e80 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f82a 	bl	8000efc <SendCommand>
  for (int i=0; i<8; i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e009      	b.n	8000ec2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f82e 	bl	8000f18 <SendChar>
  for (int i=0; i<8; i++)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	ddf2      	ble.n	8000eae <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000eda:	e006      	b.n	8000eea <HD44780_PrintStr+0x18>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f817 	bl	8000f18 <SendChar>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f4      	bne.n	8000edc <HD44780_PrintStr+0xa>
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f812 	bl	8000f34 <Send>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2101      	movs	r1, #1
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f804 	bl	8000f34 <Send>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f023 030f 	bic.w	r3, r3, #15
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f80b 	bl	8000f76 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f60:	7bba      	ldrb	r2, [r7, #14]
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f804 	bl	8000f76 <Write4Bits>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f808 	bl	8000f98 <ExpanderWrite>
  PulseEnable(value);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f820 	bl	8000fd0 <PulseEnable>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <ExpanderWrite+0x30>)
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000fae:	f107 020f 	add.w	r2, r7, #15
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	217e      	movs	r1, #126	@ 0x7e
 8000fba:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <ExpanderWrite+0x34>)
 8000fbc:	f001 fc16 	bl	80027ec <HAL_I2C_Master_Transmit>
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000003c 	.word	0x2000003c
 8000fcc:	20000040 	.word	0x20000040

08000fd0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffd8 	bl	8000f98 <ExpanderWrite>
  DelayUS(20);
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f000 f839 	bl	8001060 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffce 	bl	8000f98 <ExpanderWrite>
  DelayUS(20);
 8000ffc:	2014      	movs	r0, #20
 8000ffe:	f000 f82f 	bl	8001060 <DelayUS>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <DelayInit>:

static void DelayInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <DelayInit+0x4c>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	4a10      	ldr	r2, [pc, #64]	@ (8001058 <DelayInit+0x4c>)
 8001016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800101a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <DelayInit+0x4c>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <DelayInit+0x4c>)
 8001022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001026:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <DelayInit+0x50>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <DelayInit+0x50>)
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <DelayInit+0x50>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a08      	ldr	r2, [pc, #32]	@ (800105c <DelayInit+0x50>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <DelayInit+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001046:	bf00      	nop
  __ASM volatile ("NOP");
 8001048:	bf00      	nop
  __ASM volatile ("NOP");
 800104a:	bf00      	nop
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000edf0 	.word	0xe000edf0
 800105c:	e0001000 	.word	0xe0001000

08001060 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <DelayUS+0x44>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <DelayUS+0x48>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9a      	lsrs	r2, r3, #18
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800107c:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <DelayUS+0x4c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <DelayUS+0x4c>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f6      	bhi.n	8001082 <DelayUS+0x22>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000010 	.word	0x20000010
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	e0001000 	.word	0xe0001000

080010b0 <Mostrar_Alarma_Activada>:

void Mostrar_Alarma_Activada(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	HD44780_Clear();
 80010b4:	f7ff fe86 	bl	8000dc4 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 80010b8:	2100      	movs	r1, #0
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fe98 	bl	8000df0 <HD44780_SetCursor>
    HD44780_PrintStr("ALARMA ACTIVADA");
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <Mostrar_Alarma_Activada+0x1c>)
 80010c2:	f7ff ff06 	bl	8000ed2 <HD44780_PrintStr>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	080047f8 	.word	0x080047f8

080010d0 <Mostrar_Alarma_Desactivada>:

void Mostrar_Alarma_Desactivada(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HD44780_Clear();
 80010d4:	f7ff fe76 	bl	8000dc4 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 80010d8:	2100      	movs	r1, #0
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff fe88 	bl	8000df0 <HD44780_SetCursor>
	HD44780_PrintStr("ALARMA DESACTIVADA");
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <Mostrar_Alarma_Desactivada+0x1c>)
 80010e2:	f7ff fef6 	bl	8000ed2 <HD44780_PrintStr>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08004808 	.word	0x08004808

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f000 fedb 	bl	8001eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f883 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f000 fcd7 	bl	8001ab0 <MX_GPIO_Init>
   MX_I2C1_Init();
 8001102:	f000 f8e9 	bl	80012d8 <MX_I2C1_Init>
   MX_TIM5_Init();
 8001106:	f000 f927 	bl	8001358 <MX_TIM5_Init>
   MX_TIM9_Init();
 800110a:	f000 f973 	bl	80013f4 <MX_TIM9_Init>
   MX_USART2_UART_Init();
 800110e:	f000 f9ab 	bl	8001468 <MX_USART2_UART_Init>
   /* USER CODE BEGIN 2 */
   	/* Initialize */
 #define STEPS_90_DEGREES 50
   uint8_t rx_data;
   uint8_t alarma_estado=0;
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
   HAL_TIM_Base_Start(&htim5);
 8001116:	482b      	ldr	r0, [pc, #172]	@ (80011c4 <main+0xd4>)
 8001118:	f002 fc24 	bl	8003964 <HAL_TIM_Base_Start>
   	debounceFSM_Init();
 800111c:	f000 fbf8 	bl	8001910 <debounceFSM_Init>
   	ultrasonic_init();
 8001120:	f000 feb4 	bl	8001e8c <ultrasonic_init>
   	Alarm_Init();
 8001124:	f000 fb61 	bl	80017ea <Alarm_Init>
   	HD44780_Init(2);
 8001128:	2002      	movs	r0, #2
 800112a:	f7ff fdc7 	bl	8000cbc <HD44780_Init>
   	HD44780_Clear();
 800112e:	f7ff fe49 	bl	8000dc4 <HD44780_Clear>
   	HD44780_SetCursor(0,0);
 8001132:	2100      	movs	r1, #0
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff fe5b 	bl	8000df0 <HD44780_SetCursor>
   	HD44780_PrintStr("Nucleo");
 800113a:	4823      	ldr	r0, [pc, #140]	@ (80011c8 <main+0xd8>)
 800113c:	f7ff fec9 	bl	8000ed2 <HD44780_PrintStr>
   	HD44780_SetCursor(5,1);
 8001140:	2101      	movs	r1, #1
 8001142:	2005      	movs	r0, #5
 8001144:	f7ff fe54 	bl	8000df0 <HD44780_SetCursor>
   	HD44780_PrintStr("STM32f439zi");
 8001148:	4820      	ldr	r0, [pc, #128]	@ (80011cc <main+0xdc>)
 800114a:	f7ff fec2 	bl	8000ed2 <HD44780_PrintStr>
   	HAL_Delay(3000);
 800114e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001152:	f000 ff1f 	bl	8001f94 <HAL_Delay>

   	HD44780_Display();
 8001156:	f7ff fe7d 	bl	8000e54 <HD44780_Display>
   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while (1)
   {
     /* USER CODE END WHILE */
 	  debounceFSM_Update();
 800115a:	f000 fbf7 	bl	800194c <debounceFSM_Update>

 	  	  if(readKey()){
 800115e:	f000 fc5b 	bl	8001a18 <readKey>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01d      	beq.n	80011a4 <main+0xb4>
 	  		  switch(alarma_estado){
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <main+0x84>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d012      	beq.n	8001198 <main+0xa8>
 8001172:	e018      	b.n	80011a6 <main+0xb6>
 	  		  case 0:
 	  			if (PIR_Read() == GPIO_PIN_SET)  // Movimiento detectado
 8001174:	f000 fe28 	bl	8001dc8 <PIR_Read>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d104      	bne.n	8001188 <main+0x98>
 	  			        {
 	  			            // Encender los LEDs
 	  			            LED_On();
 800117e:	f000 fd81 	bl	8001c84 <LED_On>
 	  			            //Mostrar mensaje en lcd
 	  			            Mostrar_Alarma_Desactivada();
 8001182:	f7ff ffa5 	bl	80010d0 <Mostrar_Alarma_Desactivada>
 8001186:	e003      	b.n	8001190 <main+0xa0>
 	  			        }
 	  			        else
 	  			        {
 	  			            // Apagar los LEDs
 	  			            LED_Off();
 8001188:	f000 fd9a 	bl	8001cc0 <LED_Off>
 	  			            ////Mostrar mensaje en lcd
 	  			            Mostrar_Alarma_Activada();
 800118c:	f7ff ff90 	bl	80010b0 <Mostrar_Alarma_Activada>
 	  			        }
 	  			        HAL_Delay(100);  // Esperar 100ms antes de volver a leer el sensor
 8001190:	2064      	movs	r0, #100	@ 0x64
 8001192:	f000 feff 	bl	8001f94 <HAL_Delay>
 	  			  break;
 8001196:	e006      	b.n	80011a6 <main+0xb6>
 	  		  case 1:
 	  			Alarm_Process();
 8001198:	f000 fb32 	bl	8001800 <Alarm_Process>
 	  			HAL_Delay(100);
 800119c:	2064      	movs	r0, #100	@ 0x64
 800119e:	f000 fef9 	bl	8001f94 <HAL_Delay>
 	  			  break;
 80011a2:	e000      	b.n	80011a6 <main+0xb6>
 	  		  default:
 80011a4:	bf00      	nop
 	  		  }
 	  	  }
 	  	if (HAL_UART_Receive(&huart2, (uint8_t*)&rx_data, 1, HAL_MAX_DELAY) == HAL_OK) {
 80011a6:	1db9      	adds	r1, r7, #6
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	2201      	movs	r2, #1
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <main+0xe0>)
 80011b0:	f002 ff1a 	bl	8003fe8 <HAL_UART_Receive>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1cf      	bne.n	800115a <main+0x6a>
 	  	            Bluetooth_ProcessCommand(rx_data);
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f809 	bl	80011d4 <Bluetooth_ProcessCommand>
 	  debounceFSM_Update();
 80011c2:	e7ca      	b.n	800115a <main+0x6a>
 80011c4:	20000094 	.word	0x20000094
 80011c8:	0800481c 	.word	0x0800481c
 80011cc:	08004824 	.word	0x08004824
 80011d0:	20000124 	.word	0x20000124

080011d4 <Bluetooth_ProcessCommand>:
 /**
   * @brief System Clock Configuration
   * @retval None
   */

 void Bluetooth_ProcessCommand(char command) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
     if (command == 'A') {  // Señal para mover 90°
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b41      	cmp	r3, #65	@ 0x41
 80011e2:	d103      	bne.n	80011ec <Bluetooth_ProcessCommand+0x18>
         Stepper_Step(STEPS_90_DEGREES);
 80011e4:	2032      	movs	r0, #50	@ 0x32
 80011e6:	f000 fd89 	bl	8001cfc <Stepper_Step>
     } else if (command == 'B') {  // Señal para regresar
         Stepper_Step(-STEPS_90_DEGREES);
     }
 }
 80011ea:	e006      	b.n	80011fa <Bluetooth_ProcessCommand+0x26>
     } else if (command == 'B') {  // Señal para regresar
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b42      	cmp	r3, #66	@ 0x42
 80011f0:	d103      	bne.n	80011fa <Bluetooth_ProcessCommand+0x26>
         Stepper_Step(-STEPS_90_DEGREES);
 80011f2:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 80011f6:	f000 fd81 	bl	8001cfc <Stepper_Step>
 }
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <SystemClock_Config>:
 /**
   * @brief System Clock Configuration
   * @retval None
   */
 void SystemClock_Config(void)
 {
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	@ 0x50
 8001208:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	2230      	movs	r2, #48	@ 0x30
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fab0 	bl	8004778 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]

   /** Configure the main internal regulator output voltage
   */
   __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b28      	ldr	r3, [pc, #160]	@ (80012d0 <SystemClock_Config+0xcc>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	4a27      	ldr	r2, [pc, #156]	@ (80012d0 <SystemClock_Config+0xcc>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001236:	6413      	str	r3, [r2, #64]	@ 0x40
 8001238:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <SystemClock_Config+0xcc>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <SystemClock_Config+0xd0>)
 800124e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <SystemClock_Config+0xd0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]

   /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001264:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126a:	2302      	movs	r3, #2
 800126c:	63bb      	str	r3, [r7, #56]	@ 0x38
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   RCC_OscInitStruct.PLL.PLLM = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	643b      	str	r3, [r7, #64]	@ 0x40
   RCC_OscInitStruct.PLL.PLLN = 168;
 8001278:	23a8      	movs	r3, #168	@ 0xa8
 800127a:	647b      	str	r3, [r7, #68]	@ 0x44
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	64bb      	str	r3, [r7, #72]	@ 0x48
   RCC_OscInitStruct.PLL.PLLQ = 7;
 8001280:	2307      	movs	r3, #7
 8001282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	4618      	mov	r0, r3
 800128a:	f001 fe83 	bl	8002f94 <HAL_RCC_OscConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x94>
   {
     Error_Handler();
 8001294:	f000 f912 	bl	80014bc <Error_Handler>
   }

   /** Initializes the CPU, AHB and APB buses clocks
   */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001298:	230f      	movs	r3, #15
 800129a:	60fb      	str	r3, [r7, #12]
                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129c:	2302      	movs	r3, #2
 800129e:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012a8:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ae:	61fb      	str	r3, [r7, #28]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2105      	movs	r1, #5
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 f8e4 	bl	8003484 <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xc2>
   {
     Error_Handler();
 80012c2:	f000 f8fb 	bl	80014bc <Error_Handler>
   }
 }
 80012c6:	bf00      	nop
 80012c8:	3750      	adds	r7, #80	@ 0x50
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <MX_I2C1_Init>:
   * @brief I2C1 Initialization Function
   * @param None
   * @retval None
   */
 void MX_I2C1_Init(void)
 {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
   /* USER CODE END I2C1_Init 0 */

   /* USER CODE BEGIN I2C1_Init 1 */

   /* USER CODE END I2C1_Init 1 */
   hi2c1.Instance = I2C1;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_I2C1_Init+0x74>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <MX_I2C1_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
   hi2c1.Init.ClockSpeed = 100000;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_I2C1_Init+0x74>)
 80012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <MX_I2C1_Init+0x7c>)
 80012e6:	605a      	str	r2, [r3, #4]
   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
   hi2c1.Init.OwnAddress1 = 0;
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <MX_I2C1_Init+0x74>)
 80012f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012fa:	611a      	str	r2, [r3, #16]
   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <MX_I2C1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
   hi2c1.Init.OwnAddress2 = 0;
 8001302:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001308:	4b10      	ldr	r3, [pc, #64]	@ (800134c <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C1_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001314:	480d      	ldr	r0, [pc, #52]	@ (800134c <MX_I2C1_Init+0x74>)
 8001316:	f001 f925 	bl	8002564 <HAL_I2C_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_I2C1_Init+0x4c>
   {
     Error_Handler();
 8001320:	f000 f8cc 	bl	80014bc <Error_Handler>
   }

   /** Configure Analogue filter
   */
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001324:	2100      	movs	r1, #0
 8001326:	4809      	ldr	r0, [pc, #36]	@ (800134c <MX_I2C1_Init+0x74>)
 8001328:	f001 fdb9 	bl	8002e9e <HAL_I2CEx_ConfigAnalogFilter>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_I2C1_Init+0x5e>
   {
     Error_Handler();
 8001332:	f000 f8c3 	bl	80014bc <Error_Handler>
   }

   /** Configure Digital filter
   */
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001336:	2100      	movs	r1, #0
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_I2C1_Init+0x74>)
 800133a:	f001 fdec 	bl	8002f16 <HAL_I2CEx_ConfigDigitalFilter>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C1_Init+0x70>
   {
     Error_Handler();
 8001344:	f000 f8ba 	bl	80014bc <Error_Handler>
   }
   /* USER CODE BEGIN I2C1_Init 2 */

   /* USER CODE END I2C1_Init 2 */

 }
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000040 	.word	0x20000040
 8001350:	40005400 	.word	0x40005400
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_TIM5_Init>:
   * @brief TIM5 Initialization Function
   * @param None
   * @retval None
   */
 void MX_TIM5_Init(void)
 {
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM5_Init 0 */

   /* USER CODE END TIM5_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]

   /* USER CODE BEGIN TIM5_Init 1 */

   /* USER CODE END TIM5_Init 1 */
   htim5.Instance = TIM5;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_TIM5_Init+0x94>)
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <MX_TIM5_Init+0x98>)
 8001378:	601a      	str	r2, [r3, #0]
   htim5.Init.Prescaler = 71;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_TIM5_Init+0x94>)
 800137c:	2247      	movs	r2, #71	@ 0x47
 800137e:	605a      	str	r2, [r3, #4]
   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_TIM5_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
   htim5.Init.Period = 4294967295;
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_TIM5_Init+0x94>)
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	60da      	str	r2, [r3, #12]
   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_TIM5_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_TIM5_Init+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800139a:	4814      	ldr	r0, [pc, #80]	@ (80013ec <MX_TIM5_Init+0x94>)
 800139c:	f002 fa92 	bl	80038c4 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM5_Init+0x52>
   {
     Error_Handler();
 80013a6:	f000 f889 	bl	80014bc <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ae:	60bb      	str	r3, [r7, #8]
   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_TIM5_Init+0x94>)
 80013b8:	f002 fb3c 	bl	8003a34 <HAL_TIM_ConfigClockSource>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM5_Init+0x6e>
   {
     Error_Handler();
 80013c2:	f000 f87b 	bl	80014bc <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	@ (80013ec <MX_TIM5_Init+0x94>)
 80013d4:	f002 fd3c 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM5_Init+0x8a>
   {
     Error_Handler();
 80013de:	f000 f86d 	bl	80014bc <Error_Handler>
   }
   /* USER CODE BEGIN TIM5_Init 2 */

   /* USER CODE END TIM5_Init 2 */

 }
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000094 	.word	0x20000094
 80013f0:	40000c00 	.word	0x40000c00

080013f4 <MX_TIM9_Init>:
   * @brief TIM9 Initialization Function
   * @param None
   * @retval None
   */
 void MX_TIM9_Init(void)
 {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM9_Init 0 */

   /* USER CODE END TIM9_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]

   /* USER CODE BEGIN TIM9_Init 1 */

   /* USER CODE END TIM9_Init 1 */
   htim9.Instance = TIM9;
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001408:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <MX_TIM9_Init+0x70>)
 800140a:	601a      	str	r2, [r3, #0]
   htim9.Init.Prescaler = 0;
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_TIM9_Init+0x6c>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
   htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
   htim9.Init.Period = 65535;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_TIM9_Init+0x6c>)
 800141a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800141e:	60da      	str	r2, [r3, #12]
   htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
   htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <MX_TIM9_Init+0x6c>)
 800142e:	f002 fa49 	bl	80038c4 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM9_Init+0x48>
   {
     Error_Handler();
 8001438:	f000 f840 	bl	80014bc <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	603b      	str	r3, [r7, #0]
   if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_TIM9_Init+0x6c>)
 8001448:	f002 faf4 	bl	8003a34 <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM9_Init+0x62>
   {
     Error_Handler();
 8001452:	f000 f833 	bl	80014bc <Error_Handler>
   }
   /* USER CODE BEGIN TIM9_Init 2 */

   /* USER CODE END TIM9_Init 2 */

 }
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000dc 	.word	0x200000dc
 8001464:	40014000 	.word	0x40014000

08001468 <MX_USART2_UART_Init>:
   * @brief USART2 Initialization Function
   * @param None
   * @retval None
   */
 void MX_USART2_UART_Init(void)
 {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
   /* USER CODE END USART2_Init 0 */

   /* USER CODE BEGIN USART2_Init 1 */

   /* USER CODE END USART2_Init 1 */
   huart2.Instance = USART2;
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 800146e:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <MX_USART2_UART_Init+0x50>)
 8001470:	601a      	str	r2, [r3, #0]
   huart2.Init.BaudRate = 115200;
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
   huart2.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
   huart2.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
   huart2.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
   if (HAL_UART_Init(&huart2) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_USART2_UART_Init+0x4c>)
 80014a0:	f002 fd52 	bl	8003f48 <HAL_UART_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART2_UART_Init+0x46>
   {
     Error_Handler();
 80014aa:	f000 f807 	bl	80014bc <Error_Handler>
   }
   /* USER CODE BEGIN USART2_Init 2 */

   /* USER CODE END USART2_Init 2 */

 }
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000124 	.word	0x20000124
 80014b8:	40004400 	.word	0x40004400

080014bc <Error_Handler>:


 void Error_Handler(void)
 {
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <Error_Handler+0x8>

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001514 <HAL_MspInit+0x4c>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <HAL_MspInit+0x4c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	@ (800159c <HAL_I2C_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12c      	bne.n	8001594 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_I2C_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_I2C_MspInit+0x88>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_I2C_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001556:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155c:	2312      	movs	r3, #18
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001568:	2304      	movs	r3, #4
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <HAL_I2C_MspInit+0x8c>)
 8001574:	f000 fe18 	bl	80021a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_I2C_MspInit+0x88>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_I2C_MspInit+0x88>)
 8001582:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001586:	6413      	str	r3, [r2, #64]	@ 0x40
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_I2C_MspInit+0x88>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	@ 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40005400 	.word	0x40005400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a15      	ldr	r2, [pc, #84]	@ (800160c <HAL_TIM_Base_MspInit+0x64>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10e      	bne.n	80015d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_TIM_Base_MspInit+0x68>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <HAL_TIM_Base_MspInit+0x68>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_TIM_Base_MspInit+0x68>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80015d6:	e012      	b.n	80015fe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <HAL_TIM_Base_MspInit+0x6c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10d      	bne.n	80015fe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_TIM_Base_MspInit+0x68>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <HAL_TIM_Base_MspInit+0x68>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f2:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <HAL_TIM_Base_MspInit+0x68>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40000c00 	.word	0x40000c00
 8001610:	40023800 	.word	0x40023800
 8001614:	40014000 	.word	0x40014000

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <HAL_UART_MspInit+0xe8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12c      	bne.n	8001694 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	4b31      	ldr	r3, [pc, #196]	@ (8001704 <HAL_UART_MspInit+0xec>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a30      	ldr	r2, [pc, #192]	@ (8001704 <HAL_UART_MspInit+0xec>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b2e      	ldr	r3, [pc, #184]	@ (8001704 <HAL_UART_MspInit+0xec>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <HAL_UART_MspInit+0xec>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a29      	ldr	r2, [pc, #164]	@ (8001704 <HAL_UART_MspInit+0xec>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_UART_MspInit+0xec>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001672:	230c      	movs	r3, #12
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001682:	2307      	movs	r3, #7
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	481e      	ldr	r0, [pc, #120]	@ (8001708 <HAL_UART_MspInit+0xf0>)
 800168e:	f000 fd8b 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001692:	e031      	b.n	80016f8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <HAL_UART_MspInit+0xf4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12c      	bne.n	80016f8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <HAL_UART_MspInit+0xec>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <HAL_UART_MspInit+0xec>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_UART_MspInit+0xec>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_UART_MspInit+0xec>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a10      	ldr	r2, [pc, #64]	@ (8001704 <HAL_UART_MspInit+0xec>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <HAL_UART_MspInit+0xec>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e8:	2307      	movs	r3, #7
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4807      	ldr	r0, [pc, #28]	@ (8001710 <HAL_UART_MspInit+0xf8>)
 80016f4:	f000 fd58 	bl	80021a8 <HAL_GPIO_Init>
}
 80016f8:	bf00      	nop
 80016fa:	3730      	adds	r7, #48	@ 0x30
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40004400 	.word	0x40004400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000
 800170c:	40004800 	.word	0x40004800
 8001710:	40020c00 	.word	0x40020c00

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 fbf3 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179c:	f7ff ffea 	bl	8001774 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f002 ffdf 	bl	8004788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fc91 	bl	80010f0 <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80017dc:	08004868 	.word	0x08004868
  ldr r2, =_sbss
 80017e0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80017e4:	20000184 	.word	0x20000184

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>

080017ea <Alarm_Init>:

static uint8_t alarma_activada = 0;
static uint8_t deteccion_movimiento = 0;
static uint8_t alarma_sonando = 0;

void Alarm_Init() {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
    Ultrasonic_Init();
 80017ee:	f000 faf7 	bl	8001de0 <Ultrasonic_Init>
    Buzzer_Init();
 80017f2:	f000 f847 	bl	8001884 <Buzzer_Init>
    Button_Init();
 80017f6:	f000 fa2d 	bl	8001c54 <Button_Init>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <Alarm_Process>:

void Alarm_Process() {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
    if (Button_IsPressed()) {
 8001806:	f000 fa2d 	bl	8001c64 <Button_IsPressed>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d02f      	beq.n	8001870 <Alarm_Process+0x70>
        if (alarma_sonando) {
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <Alarm_Process+0x78>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <Alarm_Process+0x24>
            Buzzer_Off();
 8001818:	f000 f86e 	bl	80018f8 <Buzzer_Off>
            alarma_sonando = 0;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <Alarm_Process+0x78>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
            }
        } else {
            alarma_activada = 0;
        }
    }
}
 8001822:	e025      	b.n	8001870 <Alarm_Process+0x70>
        } else if (!alarma_activada) {
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <Alarm_Process+0x7c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11e      	bne.n	800186a <Alarm_Process+0x6a>
            alarma_activada = 1;
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <Alarm_Process+0x7c>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
            HAL_Delay(10000); // Espera 10 segundos
 8001832:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001836:	f000 fbad 	bl	8001f94 <HAL_Delay>
            uint32_t distancia = Ultrasonic_GetDistance();
 800183a:	f000 fad9 	bl	8001df0 <Ultrasonic_GetDistance>
 800183e:	6078      	str	r0, [r7, #4]
            if (distancia < 150) { // Menos de 1.5m
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b95      	cmp	r3, #149	@ 0x95
 8001844:	d814      	bhi.n	8001870 <Alarm_Process+0x70>
                deteccion_movimiento = 1;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <Alarm_Process+0x80>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
                HAL_Delay(10000); // Esperar otros 10s para desactivar
 800184c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001850:	f000 fba0 	bl	8001f94 <HAL_Delay>
                if (!Button_IsPressed()) {
 8001854:	f000 fa06 	bl	8001c64 <Button_IsPressed>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d108      	bne.n	8001870 <Alarm_Process+0x70>
                    Buzzer_On();
 800185e:	f000 f83f 	bl	80018e0 <Buzzer_On>
                    alarma_sonando = 1;
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <Alarm_Process+0x78>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
}
 8001868:	e002      	b.n	8001870 <Alarm_Process+0x70>
            alarma_activada = 0;
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <Alarm_Process+0x7c>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000016e 	.word	0x2000016e
 800187c:	2000016c 	.word	0x2000016c
 8001880:	2000016d 	.word	0x2000016d

08001884 <Buzzer_Init>:
 *      Author: Fabrizzio
 */
#include "main.h"
#include "API_BUZZER.h"

void Buzzer_Init() {
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <Buzzer_Init+0x54>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a11      	ldr	r2, [pc, #68]	@ (80018d8 <Buzzer_Init+0x54>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <Buzzer_Init+0x54>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = BUZZER_PIN;
 80018b4:	2308      	movs	r3, #8
 80018b6:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <Buzzer_Init+0x58>)
 80018ca:	f000 fc6d 	bl	80021a8 <HAL_GPIO_Init>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400

080018e0 <Buzzer_On>:

void Buzzer_On() {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2108      	movs	r1, #8
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <Buzzer_On+0x14>)
 80018ea:	f000 fe21 	bl	8002530 <HAL_GPIO_WritePin>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40020400 	.word	0x40020400

080018f8 <Buzzer_Off>:

void Buzzer_Off() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2108      	movs	r1, #8
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <Buzzer_Off+0x14>)
 8001902:	f000 fe15 	bl	8002530 <HAL_GPIO_WritePin>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020400 	.word	0x40020400

08001910 <debounceFSM_Init>:

delay_t tiempo_debounce;
debounceState_t estado_boton;
bool_t lectura_boton;

void debounceFSM_Init(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	delayInit(&tiempo_debounce, 40);
 8001914:	2128      	movs	r1, #40	@ 0x28
 8001916:	480a      	ldr	r0, [pc, #40]	@ (8001940 <debounceFSM_Init+0x30>)
 8001918:	f000 f892 	bl	8001a40 <delayInit>
	estado_boton = BUTTON_UP;
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <debounceFSM_Init+0x34>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
	lectura_boton = false;
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <debounceFSM_Init+0x38>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
	writeLedOff_GPIO(LD1_Pin);
 8001928:	2001      	movs	r0, #1
 800192a:	f000 f96f 	bl	8001c0c <writeLedOff_GPIO>
	writeLedOff_GPIO(LD2_Pin);
 800192e:	2080      	movs	r0, #128	@ 0x80
 8001930:	f000 f96c 	bl	8001c0c <writeLedOff_GPIO>
	writeLedOff_GPIO(LD3_Pin);
 8001934:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001938:	f000 f968 	bl	8001c0c <writeLedOff_GPIO>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000170 	.word	0x20000170
 8001944:	2000017c 	.word	0x2000017c
 8001948:	2000017d 	.word	0x2000017d

0800194c <debounceFSM_Update>:

void debounceFSM_Update(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	switch(estado_boton){
 8001950:	4b2e      	ldr	r3, [pc, #184]	@ (8001a0c <debounceFSM_Update+0xc0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d84c      	bhi.n	80019f2 <debounceFSM_Update+0xa6>
 8001958:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <debounceFSM_Update+0x14>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001971 	.word	0x08001971
 8001964:	08001983 	.word	0x08001983
 8001968:	080019af 	.word	0x080019af
 800196c:	080019c7 	.word	0x080019c7
	case BUTTON_UP:
		if(readButton_GPIO()){
 8001970:	f000 f95e 	bl	8001c30 <readButton_GPIO>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d03e      	beq.n	80019f8 <debounceFSM_Update+0xac>
			estado_boton = BUTTON_FALLING;
 800197a:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <debounceFSM_Update+0xc0>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001980:	e03a      	b.n	80019f8 <debounceFSM_Update+0xac>
	case BUTTON_FALLING:
		if(delayRead(&tiempo_debounce)){
 8001982:	4823      	ldr	r0, [pc, #140]	@ (8001a10 <debounceFSM_Update+0xc4>)
 8001984:	f000 f86d 	bl	8001a62 <delayRead>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d036      	beq.n	80019fc <debounceFSM_Update+0xb0>
			if(readButton_GPIO()){
 800198e:	f000 f94f 	bl	8001c30 <readButton_GPIO>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <debounceFSM_Update+0x5a>
				lectura_boton = true;
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <debounceFSM_Update+0xc8>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
				estado_boton = BUTTON_DOWN;
 800199e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <debounceFSM_Update+0xc0>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	701a      	strb	r2, [r3, #0]
			}else{
				estado_boton = BUTTON_UP;
			}
		}
		break;
 80019a4:	e02a      	b.n	80019fc <debounceFSM_Update+0xb0>
				estado_boton = BUTTON_UP;
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <debounceFSM_Update+0xc0>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
		break;
 80019ac:	e026      	b.n	80019fc <debounceFSM_Update+0xb0>
	case BUTTON_DOWN:
		if(!readButton_GPIO()){
 80019ae:	f000 f93f 	bl	8001c30 <readButton_GPIO>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f083 0301 	eor.w	r3, r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d020      	beq.n	8001a00 <debounceFSM_Update+0xb4>
			estado_boton = BUTTON_RISING;
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <debounceFSM_Update+0xc0>)
 80019c0:	2203      	movs	r2, #3
 80019c2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80019c4:	e01c      	b.n	8001a00 <debounceFSM_Update+0xb4>
	case BUTTON_RISING:
		if(delayRead(&tiempo_debounce)){
 80019c6:	4812      	ldr	r0, [pc, #72]	@ (8001a10 <debounceFSM_Update+0xc4>)
 80019c8:	f000 f84b 	bl	8001a62 <delayRead>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d018      	beq.n	8001a04 <debounceFSM_Update+0xb8>
			if(!readButton_GPIO()){
 80019d2:	f000 f92d 	bl	8001c30 <readButton_GPIO>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f083 0301 	eor.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <debounceFSM_Update+0x9e>
				estado_boton = BUTTON_UP;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <debounceFSM_Update+0xc0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
			}else{
				estado_boton = BUTTON_DOWN;
			}
		}
		break;
 80019e8:	e00c      	b.n	8001a04 <debounceFSM_Update+0xb8>
				estado_boton = BUTTON_DOWN;
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <debounceFSM_Update+0xc0>)
 80019ec:	2202      	movs	r2, #2
 80019ee:	701a      	strb	r2, [r3, #0]
		break;
 80019f0:	e008      	b.n	8001a04 <debounceFSM_Update+0xb8>
	default:
		Error_Handler();
 80019f2:	f7ff fd63 	bl	80014bc <Error_Handler>
		break;
 80019f6:	e006      	b.n	8001a06 <debounceFSM_Update+0xba>
		break;
 80019f8:	bf00      	nop
 80019fa:	e004      	b.n	8001a06 <debounceFSM_Update+0xba>
		break;
 80019fc:	bf00      	nop
 80019fe:	e002      	b.n	8001a06 <debounceFSM_Update+0xba>
		break;
 8001a00:	bf00      	nop
 8001a02:	e000      	b.n	8001a06 <debounceFSM_Update+0xba>
		break;
 8001a04:	bf00      	nop
	}
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000017c 	.word	0x2000017c
 8001a10:	20000170 	.word	0x20000170
 8001a14:	2000017d 	.word	0x2000017d

08001a18 <readKey>:

bool_t readKey(){
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	if(lectura_boton){
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <readKey+0x24>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <readKey+0x16>
		lectura_boton = false;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <readKey+0x24>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
		return true;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <readKey+0x18>
	}else{
		return false;
 8001a2e:	2300      	movs	r3, #0
	}
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000017d 	.word	0x2000017d

08001a40 <delayInit>:

#include "main.h"
#include "API_GPIO.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
    delay->duration = duration;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
    delay->running = false;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	721a      	strb	r2, [r3, #8]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <delayRead>:

bool_t delayRead(delay_t* delay){
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	if(delay->running){
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7a1b      	ldrb	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d010      	beq.n	8001a94 <delayRead+0x32>
		if ((HAL_GetTick() - delay->startTime) >= delay->duration){
 8001a72:	f000 fa83 	bl	8001f7c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	1ad2      	subs	r2, r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d304      	bcc.n	8001a90 <delayRead+0x2e>
			delay->running = false;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	721a      	strb	r2, [r3, #8]
			return true;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00a      	b.n	8001aa6 <delayRead+0x44>
		}else{
			return false;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e008      	b.n	8001aa6 <delayRead+0x44>
		}
	}else{
		delay->startTime = HAL_GetTick();
 8001a94:	f000 fa72 	bl	8001f7c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	721a      	strb	r2, [r3, #8]
		return false;
 8001aa4:	2300      	movs	r3, #0
	}
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <MX_GPIO_Init>:
#include "main.h"

led_t LDx;

void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	@ 0x30
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	4b4c      	ldr	r3, [pc, #304]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a4b      	ldr	r2, [pc, #300]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b49      	ldr	r3, [pc, #292]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	4b45      	ldr	r3, [pc, #276]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a44      	ldr	r2, [pc, #272]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b42      	ldr	r3, [pc, #264]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b3e      	ldr	r3, [pc, #248]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a3d      	ldr	r2, [pc, #244]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a36      	ldr	r2, [pc, #216]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a28      	ldr	r2, [pc, #160]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <MX_GPIO_Init+0x14c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001b74:	4822      	ldr	r0, [pc, #136]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b76:	f000 fcdb 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2140      	movs	r1, #64	@ 0x40
 8001b7e:	4821      	ldr	r0, [pc, #132]	@ (8001c04 <MX_GPIO_Init+0x154>)
 8001b80:	f000 fcd6 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	481b      	ldr	r0, [pc, #108]	@ (8001c08 <MX_GPIO_Init+0x158>)
 8001b9c:	f000 fb04 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ba0:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4811      	ldr	r0, [pc, #68]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001bba:	f000 faf5 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bbe:	2340      	movs	r3, #64	@ 0x40
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480b      	ldr	r0, [pc, #44]	@ (8001c04 <MX_GPIO_Init+0x154>)
 8001bd6:	f000 fae7 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <MX_GPIO_Init+0x154>)
 8001bee:	f000 fadb 	bl	80021a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3730      	adds	r7, #48	@ 0x30
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40021800 	.word	0x40021800
 8001c08:	40020800 	.word	0x40020800

08001c0c <writeLedOff_GPIO>:

void writeLedOn_GPIO (led_t LDx) {
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_SET);
}

void writeLedOff_GPIO (led_t LDx){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin (GPIOB, LDx, GPIO_PIN_RESET);
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <writeLedOff_GPIO+0x20>)
 8001c1e:	f000 fc87 	bl	8002530 <HAL_GPIO_WritePin>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40020400 	.word	0x40020400

08001c30 <readButton_GPIO>:

void delay_ms (uint32_t ms){
	HAL_Delay(ms);
}

buttonStatus_t readButton_GPIO(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin);
 8001c34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c38:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <readButton_GPIO+0x20>)
 8001c3a:	f000 fc61 	bl	8002500 <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40020800 	.word	0x40020800

08001c54 <Button_Init>:

void Button_Init() {
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
    // Configuración inicial si fuera necesaria
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <Button_IsPressed>:

uint8_t Button_IsPressed() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET;
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <Button_IsPressed+0x1c>)
 8001c6c:	f000 fc48 	bl	8002500 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40020000 	.word	0x40020000

08001c84 <LED_On>:
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
}

// Encender todos los LEDs
void LED_On(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED1_PIN, GPIO_PIN_SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c8e:	480b      	ldr	r0, [pc, #44]	@ (8001cbc <LED_On+0x38>)
 8001c90:	f000 fc4e 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c9a:	4808      	ldr	r0, [pc, #32]	@ (8001cbc <LED_On+0x38>)
 8001c9c:	f000 fc48 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED3_PIN, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <LED_On+0x38>)
 8001ca8:	f000 fc42 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED4_PIN, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cb2:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <LED_On+0x38>)
 8001cb4:	f000 fc3c 	bl	8002530 <HAL_GPIO_WritePin>
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021800 	.word	0x40021800

08001cc0 <LED_Off>:

// Apagar todos los LEDs
void LED_Off(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED1_PIN, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cca:	480b      	ldr	r0, [pc, #44]	@ (8001cf8 <LED_Off+0x38>)
 8001ccc:	f000 fc30 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd6:	4808      	ldr	r0, [pc, #32]	@ (8001cf8 <LED_Off+0x38>)
 8001cd8:	f000 fc2a 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED3_PIN, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ce2:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <LED_Off+0x38>)
 8001ce4:	f000 fc24 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED4_PIN, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cee:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <LED_Off+0x38>)
 8001cf0:	f000 fc1e 	bl	8002530 <HAL_GPIO_WritePin>
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021800 	.word	0x40021800

08001cfc <Stepper_Step>:
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(MOTOR_PORT, &GPIO_InitStruct);
}


void Stepper_Step(int steps) {
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b08b      	sub	sp, #44	@ 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    uint8_t step_sequence[4][4] = {
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <Stepper_Step+0xc4>)
 8001d06:	f107 040c 	add.w	r4, r7, #12
 8001d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 0, 0, 1}
    };

    int direction = (steps > 0) ? 1 : -1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	dd01      	ble.n	8001d1a <Stepper_Step+0x1e>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e001      	b.n	8001d1e <Stepper_Step+0x22>
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	61fb      	str	r3, [r7, #28]
    steps = (steps > 0) ? steps : -steps;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bfb8      	it	lt
 8001d26:	425b      	neglt	r3, r3
 8001d28:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < steps; i++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2e:	e03e      	b.n	8001dae <Stepper_Step+0xb2>
        for (int j = 0; j < 4; j++) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	e035      	b.n	8001da2 <Stepper_Step+0xa6>
            HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN_1, step_sequence[j][0]);
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	3328      	adds	r3, #40	@ 0x28
 8001d3c:	443b      	add	r3, r7
 8001d3e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d48:	481e      	ldr	r0, [pc, #120]	@ (8001dc4 <Stepper_Step+0xc8>)
 8001d4a:	f000 fbf1 	bl	8002530 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN_2, step_sequence[j][1]);
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	3328      	adds	r3, #40	@ 0x28
 8001d54:	443b      	add	r3, r7
 8001d56:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d60:	4818      	ldr	r0, [pc, #96]	@ (8001dc4 <Stepper_Step+0xc8>)
 8001d62:	f000 fbe5 	bl	8002530 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN_3, step_sequence[j][2]);
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	3328      	adds	r3, #40	@ 0x28
 8001d6c:	443b      	add	r3, r7
 8001d6e:	f813 3c1a 	ldrb.w	r3, [r3, #-26]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d78:	4812      	ldr	r0, [pc, #72]	@ (8001dc4 <Stepper_Step+0xc8>)
 8001d7a:	f000 fbd9 	bl	8002530 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN_4, step_sequence[j][3]);
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	3328      	adds	r3, #40	@ 0x28
 8001d84:	443b      	add	r3, r7
 8001d86:	f813 3c19 	ldrb.w	r3, [r3, #-25]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <Stepper_Step+0xc8>)
 8001d92:	f000 fbcd 	bl	8002530 <HAL_GPIO_WritePin>
            HAL_Delay(STEP_DELAY);
 8001d96:	200a      	movs	r0, #10
 8001d98:	f000 f8fc 	bl	8001f94 <HAL_Delay>
        for (int j = 0; j < 4; j++) {
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	623b      	str	r3, [r7, #32]
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	ddc6      	ble.n	8001d36 <Stepper_Step+0x3a>
    for (int i = 0; i < steps; i++) {
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	3301      	adds	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dbbc      	blt.n	8001d30 <Stepper_Step+0x34>
        }
    }
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	372c      	adds	r7, #44	@ 0x2c
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}
 8001dc0:	08004830 	.word	0x08004830
 8001dc4:	40020400 	.word	0x40020400

08001dc8 <PIR_Read>:
    HAL_GPIO_Init(PIR_PORT, &GPIO_InitStruct);
}

// Leer el estado del sensor PIR
uint8_t PIR_Read(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(PIR_PORT, PIR_PIN);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4803      	ldr	r0, [pc, #12]	@ (8001ddc <PIR_Read+0x14>)
 8001dd0:	f000 fb96 	bl	8002500 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40020000 	.word	0x40020000

08001de0 <Ultrasonic_Init>:
 */

#include "API_US.h"
#include "main.h"

void Ultrasonic_Init() {
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
    // Configuración inicial si fuera necesaria
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <Ultrasonic_GetDistance>:

uint32_t Ultrasonic_GetDistance() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
    uint32_t tiempo;

    // Enviar pulso de trigger
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_SET);
 8001df6:	2201      	movs	r2, #1
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4823      	ldr	r0, [pc, #140]	@ (8001e88 <Ultrasonic_GetDistance+0x98>)
 8001dfc:	f000 fb98 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e00:	200a      	movs	r0, #10
 8001e02:	f000 f8c7 	bl	8001f94 <HAL_Delay>
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2102      	movs	r1, #2
 8001e0a:	481f      	ldr	r0, [pc, #124]	@ (8001e88 <Ultrasonic_GetDistance+0x98>)
 8001e0c:	f000 fb90 	bl	8002530 <HAL_GPIO_WritePin>

    // Medir el tiempo del pulso de ECHO
    while (!HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)); // Espera HIGH
 8001e10:	bf00      	nop
 8001e12:	2104      	movs	r1, #4
 8001e14:	481c      	ldr	r0, [pc, #112]	@ (8001e88 <Ultrasonic_GetDistance+0x98>)
 8001e16:	f000 fb73 	bl	8002500 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f8      	beq.n	8001e12 <Ultrasonic_GetDistance+0x22>
    tiempo = HAL_GetTick();
 8001e20:	f000 f8ac 	bl	8001f7c <HAL_GetTick>
 8001e24:	6078      	str	r0, [r7, #4]
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)); // Espera LOW
 8001e26:	bf00      	nop
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4817      	ldr	r0, [pc, #92]	@ (8001e88 <Ultrasonic_GetDistance+0x98>)
 8001e2c:	f000 fb68 	bl	8002500 <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f8      	bne.n	8001e28 <Ultrasonic_GetDistance+0x38>
    tiempo = HAL_GetTick() - tiempo;
 8001e36:	f000 f8a1 	bl	8001f7c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	607b      	str	r3, [r7, #4]

    // Convertir tiempo a distancia (en cm)
    return (tiempo * 0.0343) / 2;
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fb16 	bl	8000474 <__aeabi_ui2d>
 8001e48:	a30d      	add	r3, pc, #52	@ (adr r3, 8001e80 <Ultrasonic_GetDistance+0x90>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fb8b 	bl	8000568 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e62:	f7fe fcab 	bl	80007bc <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fd8d 	bl	800098c <__aeabi_d2uiz>
 8001e72:	4603      	mov	r3, r0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	f3af 8000 	nop.w
 8001e80:	04816f00 	.word	0x04816f00
 8001e84:	3fa18fc5 	.word	0x3fa18fc5
 8001e88:	40020400 	.word	0x40020400

08001e8c <ultrasonic_init>:

#define timmer htim5 // reemplazan por el timmer que utilizen

extern TIM_HandleTypeDef timmer;

void ultrasonic_init(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&timmer);
 8001e90:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <ultrasonic_init+0x1c>)
 8001e92:	f001 fd67 	bl	8003964 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // ponggo el trigger en bajo
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <ultrasonic_init+0x20>)
 8001e9e:	f000 fb47 	bl	8002530 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000094 	.word	0x20000094
 8001eac:	40020000 	.word	0x40020000

08001eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <HAL_Init+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <HAL_Init+0x40>)
 8001eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <HAL_Init+0x40>)
 8001ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a07      	ldr	r2, [pc, #28]	@ (8001ef0 <HAL_Init+0x40>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 f931 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f000 f808 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff faf0 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023c00 	.word	0x40023c00

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_InitTick+0x54>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_InitTick+0x58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f93b 	bl	800218e <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f000 f911 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	@ (8001f50 <HAL_InitTick+0x5c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000010 	.word	0x20000010
 8001f4c:	20000018 	.word	0x20000018
 8001f50:	20000014 	.word	0x20000014

08001f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_IncTick+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_IncTick+0x24>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <HAL_IncTick+0x24>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000018 	.word	0x20000018
 8001f78:	20000180 	.word	0x20000180

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <HAL_GetTick+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000180 	.word	0x20000180

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff ffee 	bl	8001f7c <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_Delay+0x44>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000018 	.word	0x20000018

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	@ (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	@ (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	@ 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	@ 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	@ (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff47 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff5c 	bl	8002024 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffb0 	bl	80020fc <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	@ 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e177      	b.n	80024b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	429a      	cmp	r2, r3
 80021de:	f040 8166 	bne.w	80024ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d005      	beq.n	80021fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d130      	bne.n	800225c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 0201 	and.w	r2, r3, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b03      	cmp	r3, #3
 8002266:	d017      	beq.n	8002298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d123      	bne.n	80022ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	08da      	lsrs	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	220f      	movs	r2, #15
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	08da      	lsrs	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3208      	adds	r2, #8
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80c0 	beq.w	80024ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b66      	ldr	r3, [pc, #408]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	4a65      	ldr	r2, [pc, #404]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233c:	6453      	str	r3, [r2, #68]	@ 0x44
 800233e:	4b63      	ldr	r3, [pc, #396]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234a:	4a61      	ldr	r2, [pc, #388]	@ (80024d0 <HAL_GPIO_Init+0x328>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a58      	ldr	r2, [pc, #352]	@ (80024d4 <HAL_GPIO_Init+0x32c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d037      	beq.n	80023e6 <HAL_GPIO_Init+0x23e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a57      	ldr	r2, [pc, #348]	@ (80024d8 <HAL_GPIO_Init+0x330>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_GPIO_Init+0x23a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a56      	ldr	r2, [pc, #344]	@ (80024dc <HAL_GPIO_Init+0x334>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x236>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a55      	ldr	r2, [pc, #340]	@ (80024e0 <HAL_GPIO_Init+0x338>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x232>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a54      	ldr	r2, [pc, #336]	@ (80024e4 <HAL_GPIO_Init+0x33c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x22e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a53      	ldr	r2, [pc, #332]	@ (80024e8 <HAL_GPIO_Init+0x340>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x22a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_GPIO_Init+0x344>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x226>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_GPIO_Init+0x348>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x222>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a50      	ldr	r2, [pc, #320]	@ (80024f4 <HAL_GPIO_Init+0x34c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x21e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x21a>
 80023be:	2309      	movs	r3, #9
 80023c0:	e012      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023c2:	230a      	movs	r3, #10
 80023c4:	e010      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023c6:	2308      	movs	r3, #8
 80023c8:	e00e      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	@ (80024d0 <HAL_GPIO_Init+0x328>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a34      	ldr	r2, [pc, #208]	@ (80024fc <HAL_GPIO_Init+0x354>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a29      	ldr	r2, [pc, #164]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <HAL_GPIO_Init+0x354>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247e:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a8:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <HAL_GPIO_Init+0x354>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f ae84 	bls.w	80021c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40021400 	.word	0x40021400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40021c00 	.word	0x40021c00
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40022400 	.word	0x40022400
 80024fc:	40013c00 	.word	0x40013c00

08002500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e001      	b.n	8002522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800254c:	e003      	b.n	8002556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	619a      	str	r2, [r3, #24]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e12b      	b.n	80027ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe ffc4 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	@ 0x24
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c8:	f001 f954 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 80025cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a81      	ldr	r2, [pc, #516]	@ (80027d8 <HAL_I2C_Init+0x274>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d807      	bhi.n	80025e8 <HAL_I2C_Init+0x84>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a80      	ldr	r2, [pc, #512]	@ (80027dc <HAL_I2C_Init+0x278>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	bf94      	ite	ls
 80025e0:	2301      	movls	r3, #1
 80025e2:	2300      	movhi	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e006      	b.n	80025f6 <HAL_I2C_Init+0x92>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a7d      	ldr	r2, [pc, #500]	@ (80027e0 <HAL_I2C_Init+0x27c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bf94      	ite	ls
 80025f0:	2301      	movls	r3, #1
 80025f2:	2300      	movhi	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0e7      	b.n	80027ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a78      	ldr	r2, [pc, #480]	@ (80027e4 <HAL_I2C_Init+0x280>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0c9b      	lsrs	r3, r3, #18
 8002608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a6a      	ldr	r2, [pc, #424]	@ (80027d8 <HAL_I2C_Init+0x274>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d802      	bhi.n	8002638 <HAL_I2C_Init+0xd4>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3301      	adds	r3, #1
 8002636:	e009      	b.n	800264c <HAL_I2C_Init+0xe8>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	4a69      	ldr	r2, [pc, #420]	@ (80027e8 <HAL_I2C_Init+0x284>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	3301      	adds	r3, #1
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800265e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	495c      	ldr	r1, [pc, #368]	@ (80027d8 <HAL_I2C_Init+0x274>)
 8002668:	428b      	cmp	r3, r1
 800266a:	d819      	bhi.n	80026a0 <HAL_I2C_Init+0x13c>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1e59      	subs	r1, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fbb1 f3f3 	udiv	r3, r1, r3
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002680:	400b      	ands	r3, r1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_I2C_Init+0x138>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e59      	subs	r1, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fbb1 f3f3 	udiv	r3, r1, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269a:	e051      	b.n	8002740 <HAL_I2C_Init+0x1dc>
 800269c:	2304      	movs	r3, #4
 800269e:	e04f      	b.n	8002740 <HAL_I2C_Init+0x1dc>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_I2C_Init+0x168>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1e58      	subs	r0, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e012      	b.n	80026f2 <HAL_I2C_Init+0x18e>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	0099      	lsls	r1, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Init+0x196>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e022      	b.n	8002740 <HAL_I2C_Init+0x1dc>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <HAL_I2C_Init+0x1bc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e58      	subs	r0, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	440b      	add	r3, r1
 8002710:	fbb0 f3f3 	udiv	r3, r0, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800271e:	e00f      	b.n	8002740 <HAL_I2C_Init+0x1dc>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	0099      	lsls	r1, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	6809      	ldr	r1, [r1, #0]
 8002744:	4313      	orrs	r3, r2
 8002746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800276e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6911      	ldr	r1, [r2, #16]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68d2      	ldr	r2, [r2, #12]
 800277a:	4311      	orrs	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	430b      	orrs	r3, r1
 8002782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	000186a0 	.word	0x000186a0
 80027dc:	001e847f 	.word	0x001e847f
 80027e0:	003d08ff 	.word	0x003d08ff
 80027e4:	431bde83 	.word	0x431bde83
 80027e8:	10624dd3 	.word	0x10624dd3

080027ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	461a      	mov	r2, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	817b      	strh	r3, [r7, #10]
 80027fc:	4613      	mov	r3, r2
 80027fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff fbbc 	bl	8001f7c <HAL_GetTick>
 8002804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	f040 80e0 	bne.w	80029d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2319      	movs	r3, #25
 800281a:	2201      	movs	r2, #1
 800281c:	4970      	ldr	r1, [pc, #448]	@ (80029e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f964 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	e0d3      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_I2C_Master_Transmit+0x50>
 8002838:	2302      	movs	r3, #2
 800283a:	e0cc      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d007      	beq.n	8002862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2221      	movs	r2, #33	@ 0x21
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2210      	movs	r2, #16
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a50      	ldr	r2, [pc, #320]	@ (80029e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80028a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f89c 	bl	80029e8 <I2C_MasterRequestWrite>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e08d      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028d0:	e066      	b.n	80029a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fa22 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d107      	bne.n	80028fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b04      	cmp	r3, #4
 800293a:	d11b      	bne.n	8002974 <HAL_I2C_Master_Transmit+0x188>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d017      	beq.n	8002974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	6a39      	ldr	r1, [r7, #32]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fa19 	bl	8002db0 <I2C_WaitOnBTFFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2b04      	cmp	r3, #4
 800298a:	d107      	bne.n	800299c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e01a      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d194      	bne.n	80028d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	00100002 	.word	0x00100002
 80029e4:	ffff0000 	.word	0xffff0000

080029e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	460b      	mov	r3, r1
 80029f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d006      	beq.n	8002a12 <I2C_MasterRequestWrite+0x2a>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d003      	beq.n	8002a12 <I2C_MasterRequestWrite+0x2a>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a10:	d108      	bne.n	8002a24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e00b      	b.n	8002a3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d107      	bne.n	8002a3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f84f 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a62:	d103      	bne.n	8002a6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e035      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a78:	d108      	bne.n	8002a8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a88:	611a      	str	r2, [r3, #16]
 8002a8a:	e01b      	b.n	8002ac4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a8c:	897b      	ldrh	r3, [r7, #10]
 8002a8e:	11db      	asrs	r3, r3, #7
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0306 	and.w	r3, r3, #6
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f063 030f 	orn	r3, r3, #15
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	490e      	ldr	r1, [pc, #56]	@ (8002ae4 <I2C_MasterRequestWrite+0xfc>)
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f898 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e010      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4907      	ldr	r1, [pc, #28]	@ (8002ae8 <I2C_MasterRequestWrite+0x100>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f888 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	00010008 	.word	0x00010008
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e048      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d044      	beq.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7ff fa39 	bl	8001f7c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d139      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	e00c      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e023      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10d      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	e00c      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d093      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	e071      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfe:	d123      	bne.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e067      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d041      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c50:	f7ff f994 	bl	8001f7c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d136      	bne.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10c      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e00b      	b.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e021      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10c      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af6d 	bne.w	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	e034      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f886 	bl	8002e40 <I2C_IsAcknowledgeFailed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d028      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7ff f919 	bl	8001f7c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b80      	cmp	r3, #128	@ 0x80
 8002d68:	d016      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da2:	2b80      	cmp	r3, #128	@ 0x80
 8002da4:	d1c3      	bne.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f83e 	bl	8002e40 <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d028      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7ff f8d1 	bl	8001f7c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11d      	bne.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d016      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1c3      	bne.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e56:	d11b      	bne.n	8002e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d129      	bne.n	8002f08 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	@ 0x24
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0210 	bic.w	r2, r2, #16
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d12a      	bne.n	8002f86 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	@ 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f50:	89fb      	ldrh	r3, [r7, #14]
 8002f52:	f023 030f 	bic.w	r3, r3, #15
 8002f56:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	89fa      	ldrh	r2, [r7, #14]
 8002f68:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e267      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d075      	beq.n	800309e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fb2:	4b88      	ldr	r3, [pc, #544]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbe:	4b85      	ldr	r3, [pc, #532]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d112      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fca:	4b82      	ldr	r3, [pc, #520]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d05b      	beq.n	800309c <HAL_RCC_OscConfig+0x108>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d157      	bne.n	800309c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e242      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x74>
 8002ffa:	4b76      	ldr	r3, [pc, #472]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a75      	ldr	r2, [pc, #468]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e01d      	b.n	8003044 <HAL_RCC_OscConfig+0xb0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x98>
 8003012:	4b70      	ldr	r3, [pc, #448]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6f      	ldr	r2, [pc, #444]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b6d      	ldr	r3, [pc, #436]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6c      	ldr	r2, [pc, #432]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0xb0>
 800302c:	4b69      	ldr	r3, [pc, #420]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a68      	ldr	r2, [pc, #416]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b66      	ldr	r3, [pc, #408]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a65      	ldr	r2, [pc, #404]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 800303e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe ff96 	bl	8001f7c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe ff92 	bl	8001f7c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	@ 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e207      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b5b      	ldr	r3, [pc, #364]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0xc0>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe ff82 	bl	8001f7c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe ff7e 	bl	8001f7c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	@ 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1f3      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	4b51      	ldr	r3, [pc, #324]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0xe8>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d063      	beq.n	8003172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030aa:	4b4a      	ldr	r3, [pc, #296]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b6:	4b47      	ldr	r3, [pc, #284]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11c      	bne.n	80030fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c2:	4b44      	ldr	r3, [pc, #272]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d116      	bne.n	80030fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	4b41      	ldr	r3, [pc, #260]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_RCC_OscConfig+0x152>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1c7      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	4b3b      	ldr	r3, [pc, #236]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4937      	ldr	r1, [pc, #220]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	e03a      	b.n	8003172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003104:	4b34      	ldr	r3, [pc, #208]	@ (80031d8 <HAL_RCC_OscConfig+0x244>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe ff37 	bl	8001f7c <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe ff33 	bl	8001f7c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e1a8      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	4b2b      	ldr	r3, [pc, #172]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4925      	ldr	r1, [pc, #148]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
 8003144:	e015      	b.n	8003172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003146:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <HAL_RCC_OscConfig+0x244>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe ff16 	bl	8001f7c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003154:	f7fe ff12 	bl	8001f7c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e187      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d036      	beq.n	80031ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003186:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <HAL_RCC_OscConfig+0x248>)
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe fef6 	bl	8001f7c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7fe fef2 	bl	8001f7c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e167      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <HAL_RCC_OscConfig+0x240>)
 80031a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x200>
 80031b2:	e01b      	b.n	80031ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b4:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <HAL_RCC_OscConfig+0x248>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fedf 	bl	8001f7c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	e00e      	b.n	80031e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe fedb 	bl	8001f7c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d907      	bls.n	80031e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e150      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
 80031d4:	40023800 	.word	0x40023800
 80031d8:	42470000 	.word	0x42470000
 80031dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b88      	ldr	r3, [pc, #544]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ea      	bne.n	80031c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8097 	beq.w	8003328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b81      	ldr	r3, [pc, #516]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	4b7d      	ldr	r3, [pc, #500]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	4a7c      	ldr	r2, [pc, #496]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	@ 0x40
 800321a:	4b7a      	ldr	r3, [pc, #488]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	4b77      	ldr	r3, [pc, #476]	@ (8003408 <HAL_RCC_OscConfig+0x474>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d118      	bne.n	8003268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003236:	4b74      	ldr	r3, [pc, #464]	@ (8003408 <HAL_RCC_OscConfig+0x474>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a73      	ldr	r2, [pc, #460]	@ (8003408 <HAL_RCC_OscConfig+0x474>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7fe fe9b 	bl	8001f7c <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7fe fe97 	bl	8001f7c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e10c      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325c:	4b6a      	ldr	r3, [pc, #424]	@ (8003408 <HAL_RCC_OscConfig+0x474>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x2ea>
 8003270:	4b64      	ldr	r3, [pc, #400]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003274:	4a63      	ldr	r2, [pc, #396]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6713      	str	r3, [r2, #112]	@ 0x70
 800327c:	e01c      	b.n	80032b8 <HAL_RCC_OscConfig+0x324>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b05      	cmp	r3, #5
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x30c>
 8003286:	4b5f      	ldr	r3, [pc, #380]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	4a5e      	ldr	r2, [pc, #376]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	6713      	str	r3, [r2, #112]	@ 0x70
 8003292:	4b5c      	ldr	r3, [pc, #368]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003296:	4a5b      	ldr	r2, [pc, #364]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6713      	str	r3, [r2, #112]	@ 0x70
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0x324>
 80032a0:	4b58      	ldr	r3, [pc, #352]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a4:	4a57      	ldr	r2, [pc, #348]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ac:	4b55      	ldr	r3, [pc, #340]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b0:	4a54      	ldr	r2, [pc, #336]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 80032b2:	f023 0304 	bic.w	r3, r3, #4
 80032b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fe fe5c 	bl	8001f7c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe fe58 	bl	8001f7c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0cb      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0ee      	beq.n	80032c8 <HAL_RCC_OscConfig+0x334>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fe fe46 	bl	8001f7c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fe fe42 	bl	8001f7c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0b5      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330a:	4b3e      	ldr	r3, [pc, #248]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1ee      	bne.n	80032f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331c:	4b39      	ldr	r3, [pc, #228]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	4a38      	ldr	r2, [pc, #224]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003326:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80a1 	beq.w	8003474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003332:	4b34      	ldr	r3, [pc, #208]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b08      	cmp	r3, #8
 800333c:	d05c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d141      	bne.n	80033ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b31      	ldr	r3, [pc, #196]	@ (800340c <HAL_RCC_OscConfig+0x478>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fe16 	bl	8001f7c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe fe12 	bl	8001f7c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e087      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	491b      	ldr	r1, [pc, #108]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339c:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <HAL_RCC_OscConfig+0x478>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fdeb 	bl	8001f7c <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fde7 	bl	8001f7c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e05c      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x416>
 80033c8:	e054      	b.n	8003474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_RCC_OscConfig+0x478>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe fdd4 	bl	8001f7c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe fdd0 	bl	8001f7c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e045      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <HAL_RCC_OscConfig+0x470>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x444>
 80033f6:	e03d      	b.n	8003474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e038      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
 8003404:	40023800 	.word	0x40023800
 8003408:	40007000 	.word	0x40007000
 800340c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003410:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <HAL_RCC_OscConfig+0x4ec>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d028      	beq.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d121      	bne.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d11a      	bne.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003448:	4293      	cmp	r3, r2
 800344a:	d111      	bne.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	3b01      	subs	r3, #1
 800345a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800

08003484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0cc      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b68      	ldr	r3, [pc, #416]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d90c      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b65      	ldr	r3, [pc, #404]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b63      	ldr	r3, [pc, #396]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b8      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d8:	4b59      	ldr	r3, [pc, #356]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a58      	ldr	r2, [pc, #352]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f0:	4b53      	ldr	r3, [pc, #332]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a52      	ldr	r2, [pc, #328]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b50      	ldr	r3, [pc, #320]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	494d      	ldr	r1, [pc, #308]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d044      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b47      	ldr	r3, [pc, #284]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d119      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d003      	beq.n	8003542 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	2b03      	cmp	r3, #3
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	4b3f      	ldr	r3, [pc, #252]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	4b3b      	ldr	r3, [pc, #236]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e067      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b37      	ldr	r3, [pc, #220]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4934      	ldr	r1, [pc, #208]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003574:	f7fe fd02 	bl	8001f7c <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fe fcfe 	bl	8001f7c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e04f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b25      	ldr	r3, [pc, #148]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20c      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b22      	ldr	r3, [pc, #136]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e032      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d8:	4b19      	ldr	r3, [pc, #100]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4916      	ldr	r1, [pc, #88]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f6:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	490e      	ldr	r1, [pc, #56]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800360a:	f000 f821 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	490a      	ldr	r1, [pc, #40]	@ (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	5ccb      	ldrb	r3, [r1, r3]
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fc62 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023c00 	.word	0x40023c00
 8003640:	40023800 	.word	0x40023800
 8003644:	08004840 	.word	0x08004840
 8003648:	20000010 	.word	0x20000010
 800364c:	20000014 	.word	0x20000014

08003650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003654:	b094      	sub	sp, #80	@ 0x50
 8003656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003668:	4b79      	ldr	r3, [pc, #484]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d00d      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x40>
 8003674:	2b08      	cmp	r3, #8
 8003676:	f200 80e1 	bhi.w	800383c <HAL_RCC_GetSysClockFreq+0x1ec>
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x34>
 800367e:	2b04      	cmp	r3, #4
 8003680:	d003      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x3a>
 8003682:	e0db      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b73      	ldr	r3, [pc, #460]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x204>)
 8003686:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003688:	e0db      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800368a:	4b73      	ldr	r3, [pc, #460]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x208>)
 800368c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800368e:	e0d8      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003690:	4b6f      	ldr	r3, [pc, #444]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003698:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369a:	4b6d      	ldr	r3, [pc, #436]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d063      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	2200      	movs	r2, #0
 80036ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ba:	2300      	movs	r3, #0
 80036bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036c2:	4622      	mov	r2, r4
 80036c4:	462b      	mov	r3, r5
 80036c6:	f04f 0000 	mov.w	r0, #0
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	0159      	lsls	r1, r3, #5
 80036d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d4:	0150      	lsls	r0, r2, #5
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4621      	mov	r1, r4
 80036dc:	1a51      	subs	r1, r2, r1
 80036de:	6139      	str	r1, [r7, #16]
 80036e0:	4629      	mov	r1, r5
 80036e2:	eb63 0301 	sbc.w	r3, r3, r1
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f4:	4659      	mov	r1, fp
 80036f6:	018b      	lsls	r3, r1, #6
 80036f8:	4651      	mov	r1, sl
 80036fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fe:	4651      	mov	r1, sl
 8003700:	018a      	lsls	r2, r1, #6
 8003702:	4651      	mov	r1, sl
 8003704:	ebb2 0801 	subs.w	r8, r2, r1
 8003708:	4659      	mov	r1, fp
 800370a:	eb63 0901 	sbc.w	r9, r3, r1
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003722:	4690      	mov	r8, r2
 8003724:	4699      	mov	r9, r3
 8003726:	4623      	mov	r3, r4
 8003728:	eb18 0303 	adds.w	r3, r8, r3
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	462b      	mov	r3, r5
 8003730:	eb49 0303 	adc.w	r3, r9, r3
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003742:	4629      	mov	r1, r5
 8003744:	024b      	lsls	r3, r1, #9
 8003746:	4621      	mov	r1, r4
 8003748:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800374c:	4621      	mov	r1, r4
 800374e:	024a      	lsls	r2, r1, #9
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003756:	2200      	movs	r2, #0
 8003758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800375a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800375c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003760:	f7fd f934 	bl	80009cc <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4613      	mov	r3, r2
 800376a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800376c:	e058      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376e:	4b38      	ldr	r3, [pc, #224]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	2200      	movs	r2, #0
 8003776:	4618      	mov	r0, r3
 8003778:	4611      	mov	r1, r2
 800377a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800377e:	623b      	str	r3, [r7, #32]
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24
 8003784:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	f04f 0000 	mov.w	r0, #0
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	0159      	lsls	r1, r3, #5
 8003796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800379a:	0150      	lsls	r0, r2, #5
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4641      	mov	r1, r8
 80037a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037a6:	4649      	mov	r1, r9
 80037a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037c0:	ebb2 040a 	subs.w	r4, r2, sl
 80037c4:	eb63 050b 	sbc.w	r5, r3, fp
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	00eb      	lsls	r3, r5, #3
 80037d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d6:	00e2      	lsls	r2, r4, #3
 80037d8:	4614      	mov	r4, r2
 80037da:	461d      	mov	r5, r3
 80037dc:	4643      	mov	r3, r8
 80037de:	18e3      	adds	r3, r4, r3
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	464b      	mov	r3, r9
 80037e4:	eb45 0303 	adc.w	r3, r5, r3
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037f6:	4629      	mov	r1, r5
 80037f8:	028b      	lsls	r3, r1, #10
 80037fa:	4621      	mov	r1, r4
 80037fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003800:	4621      	mov	r1, r4
 8003802:	028a      	lsls	r2, r1, #10
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800380a:	2200      	movs	r2, #0
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	61fa      	str	r2, [r7, #28]
 8003810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003814:	f7fd f8da 	bl	80009cc <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4613      	mov	r3, r2
 800381e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	3301      	adds	r3, #1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003830:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800383a:	e002      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x204>)
 800383e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003844:	4618      	mov	r0, r3
 8003846:	3750      	adds	r7, #80	@ 0x50
 8003848:	46bd      	mov	sp, r7
 800384a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	00f42400 	.word	0x00f42400
 8003858:	007a1200 	.word	0x007a1200

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000010 	.word	0x20000010

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4903      	ldr	r1, [pc, #12]	@ (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	08004850 	.word	0x08004850

0800389c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038a0:	f7ff ffdc 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0b5b      	lsrs	r3, r3, #13
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4903      	ldr	r1, [pc, #12]	@ (80038c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	08004850 	.word	0x08004850

080038c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e041      	b.n	800395a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fe5c 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 f95e 	bl	8003bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d001      	beq.n	800397c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e046      	b.n	8003a0a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a23      	ldr	r2, [pc, #140]	@ (8003a18 <HAL_TIM_Base_Start+0xb4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d022      	beq.n	80039d4 <HAL_TIM_Base_Start+0x70>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003996:	d01d      	beq.n	80039d4 <HAL_TIM_Base_Start+0x70>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a1c <HAL_TIM_Base_Start+0xb8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d018      	beq.n	80039d4 <HAL_TIM_Base_Start+0x70>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a20 <HAL_TIM_Base_Start+0xbc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d013      	beq.n	80039d4 <HAL_TIM_Base_Start+0x70>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <HAL_TIM_Base_Start+0xc0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00e      	beq.n	80039d4 <HAL_TIM_Base_Start+0x70>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003a28 <HAL_TIM_Base_Start+0xc4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_TIM_Base_Start+0x70>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a19      	ldr	r2, [pc, #100]	@ (8003a2c <HAL_TIM_Base_Start+0xc8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_TIM_Base_Start+0x70>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a18      	ldr	r2, [pc, #96]	@ (8003a30 <HAL_TIM_Base_Start+0xcc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d111      	bne.n	80039f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d010      	beq.n	8003a08 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f6:	e007      	b.n	8003a08 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800
 8003a24:	40000c00 	.word	0x40000c00
 8003a28:	40010400 	.word	0x40010400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40001800 	.word	0x40001800

08003a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_ConfigClockSource+0x1c>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0b4      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x186>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a88:	d03e      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0xd4>
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8e:	f200 8087 	bhi.w	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a96:	f000 8086 	beq.w	8003ba6 <HAL_TIM_ConfigClockSource+0x172>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9e:	d87f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b70      	cmp	r3, #112	@ 0x70
 8003aa2:	d01a      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xa6>
 8003aa4:	2b70      	cmp	r3, #112	@ 0x70
 8003aa6:	d87b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa8:	2b60      	cmp	r3, #96	@ 0x60
 8003aaa:	d050      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x11a>
 8003aac:	2b60      	cmp	r3, #96	@ 0x60
 8003aae:	d877      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b50      	cmp	r3, #80	@ 0x50
 8003ab2:	d03c      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xfa>
 8003ab4:	2b50      	cmp	r3, #80	@ 0x50
 8003ab6:	d873      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d058      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x13a>
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d86f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b30      	cmp	r3, #48	@ 0x30
 8003ac2:	d064      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ac4:	2b30      	cmp	r3, #48	@ 0x30
 8003ac6:	d86b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d060      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d867      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05c      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d05a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad8:	e062      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aea:	f000 f991 	bl	8003e10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	609a      	str	r2, [r3, #8]
      break;
 8003b06:	e04f      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b18:	f000 f97a 	bl	8003e10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b2a:	609a      	str	r2, [r3, #8]
      break;
 8003b2c:	e03c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f000 f8ee 	bl	8003d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2150      	movs	r1, #80	@ 0x50
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f947 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003b4c:	e02c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 f90d 	bl	8003d7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2160      	movs	r1, #96	@ 0x60
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f937 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e01c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 f8ce 	bl	8003d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2140      	movs	r1, #64	@ 0x40
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f927 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e00c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f000 f91e 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003b9e:	e003      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	e000      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a46      	ldr	r2, [pc, #280]	@ (8003cf0 <TIM_Base_SetConfig+0x12c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d013      	beq.n	8003c04 <TIM_Base_SetConfig+0x40>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be2:	d00f      	beq.n	8003c04 <TIM_Base_SetConfig+0x40>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a43      	ldr	r2, [pc, #268]	@ (8003cf4 <TIM_Base_SetConfig+0x130>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a42      	ldr	r2, [pc, #264]	@ (8003cf8 <TIM_Base_SetConfig+0x134>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d007      	beq.n	8003c04 <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a41      	ldr	r2, [pc, #260]	@ (8003cfc <TIM_Base_SetConfig+0x138>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a40      	ldr	r2, [pc, #256]	@ (8003d00 <TIM_Base_SetConfig+0x13c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d108      	bne.n	8003c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a35      	ldr	r2, [pc, #212]	@ (8003cf0 <TIM_Base_SetConfig+0x12c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02b      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c24:	d027      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a32      	ldr	r2, [pc, #200]	@ (8003cf4 <TIM_Base_SetConfig+0x130>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d023      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a31      	ldr	r2, [pc, #196]	@ (8003cf8 <TIM_Base_SetConfig+0x134>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01f      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a30      	ldr	r2, [pc, #192]	@ (8003cfc <TIM_Base_SetConfig+0x138>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01b      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2f      	ldr	r2, [pc, #188]	@ (8003d00 <TIM_Base_SetConfig+0x13c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d017      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2e      	ldr	r2, [pc, #184]	@ (8003d04 <TIM_Base_SetConfig+0x140>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <TIM_Base_SetConfig+0x144>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2c      	ldr	r2, [pc, #176]	@ (8003d0c <TIM_Base_SetConfig+0x148>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2b      	ldr	r2, [pc, #172]	@ (8003d10 <TIM_Base_SetConfig+0x14c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <TIM_Base_SetConfig+0x150>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a29      	ldr	r2, [pc, #164]	@ (8003d18 <TIM_Base_SetConfig+0x154>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <TIM_Base_SetConfig+0x12c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_Base_SetConfig+0xf8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <TIM_Base_SetConfig+0x13c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d103      	bne.n	8003cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f023 0201 	bic.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40010400 	.word	0x40010400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800
 8003d10:	40001800 	.word	0x40001800
 8003d14:	40001c00 	.word	0x40001c00
 8003d18:	40002000 	.word	0x40002000

08003d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f023 030a 	bic.w	r3, r3, #10
 8003d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b087      	sub	sp, #28
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f023 0210 	bic.w	r2, r3, #16
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	031b      	lsls	r3, r3, #12
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003db6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f043 0307 	orr.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	021a      	lsls	r2, r3, #8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e05a      	b.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	@ (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1a      	ldr	r2, [pc, #104]	@ (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a17      	ldr	r2, [pc, #92]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10c      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40001800 	.word	0x40001800

08003f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e042      	b.n	8003fe0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fb52 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	@ 0x24
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f97f 	bl	8004290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	@ 0x28
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b20      	cmp	r3, #32
 8004006:	f040 8081 	bne.w	800410c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_UART_Receive+0x2e>
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e079      	b.n	800410e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2222      	movs	r2, #34	@ 0x22
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800402e:	f7fd ffa5 	bl	8001f7c <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d108      	bne.n	800405c <HAL_UART_Receive+0x74>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e003      	b.n	8004064 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004064:	e047      	b.n	80040f6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	2120      	movs	r1, #32
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f850 	bl	8004116 <UART_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e042      	b.n	800410e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10c      	bne.n	80040a8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409a:	b29a      	uxth	r2, r3
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	3302      	adds	r3, #2
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e01f      	b.n	80040e8 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b0:	d007      	beq.n	80040c2 <HAL_UART_Receive+0xda>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_UART_Receive+0xe8>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e008      	b.n	80040e2 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1b2      	bne.n	8004066 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004126:	e03b      	b.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d037      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004130:	f7fd ff24 	bl	8001f7c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <UART_WaitOnFlagUntilTimeout+0x30>
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e03a      	b.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d023      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b80      	cmp	r3, #128	@ 0x80
 800415c:	d020      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b40      	cmp	r3, #64	@ 0x40
 8004162:	d01d      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b08      	cmp	r3, #8
 8004170:	d116      	bne.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f81d 	bl	80041c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2208      	movs	r2, #8
 8004192:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e00f      	b.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d0b4      	beq.n	8004128 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b095      	sub	sp, #84	@ 0x54
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	61fb      	str	r3, [r7, #28]
   return(result);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	2b01      	cmp	r3, #1
 800423e:	d119      	bne.n	8004274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f023 0310 	bic.w	r3, r3, #16
 8004256:	647b      	str	r3, [r7, #68]	@ 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004260:	61ba      	str	r2, [r7, #24]
 8004262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6979      	ldr	r1, [r7, #20]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	613b      	str	r3, [r7, #16]
   return(result);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004282:	bf00      	nop
 8004284:	3754      	adds	r7, #84	@ 0x54
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b0c0      	sub	sp, #256	@ 0x100
 8004296:	af00      	add	r7, sp, #0
 8004298:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	68d9      	ldr	r1, [r3, #12]
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	ea40 0301 	orr.w	r3, r0, r1
 80042b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042e8:	f021 010c 	bic.w	r1, r1, #12
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042f6:	430b      	orrs	r3, r1
 80042f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430a:	6999      	ldr	r1, [r3, #24]
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	ea40 0301 	orr.w	r3, r0, r1
 8004316:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b8f      	ldr	r3, [pc, #572]	@ (800455c <UART_SetConfig+0x2cc>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d005      	beq.n	8004330 <UART_SetConfig+0xa0>
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b8d      	ldr	r3, [pc, #564]	@ (8004560 <UART_SetConfig+0x2d0>)
 800432c:	429a      	cmp	r2, r3
 800432e:	d104      	bne.n	800433a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7ff fab4 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8004334:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004338:	e003      	b.n	8004342 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800433a:	f7ff fa9b 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 800433e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800434c:	f040 810c 	bne.w	8004568 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800435a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800435e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	1891      	adds	r1, r2, r2
 8004368:	65b9      	str	r1, [r7, #88]	@ 0x58
 800436a:	415b      	adcs	r3, r3
 800436c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800436e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004372:	4621      	mov	r1, r4
 8004374:	eb12 0801 	adds.w	r8, r2, r1
 8004378:	4629      	mov	r1, r5
 800437a:	eb43 0901 	adc.w	r9, r3, r1
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800438a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004392:	4690      	mov	r8, r2
 8004394:	4699      	mov	r9, r3
 8004396:	4623      	mov	r3, r4
 8004398:	eb18 0303 	adds.w	r3, r8, r3
 800439c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043a0:	462b      	mov	r3, r5
 80043a2:	eb49 0303 	adc.w	r3, r9, r3
 80043a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043be:	460b      	mov	r3, r1
 80043c0:	18db      	adds	r3, r3, r3
 80043c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043c4:	4613      	mov	r3, r2
 80043c6:	eb42 0303 	adc.w	r3, r2, r3
 80043ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80043cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043d4:	f7fc fafa 	bl	80009cc <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4b61      	ldr	r3, [pc, #388]	@ (8004564 <UART_SetConfig+0x2d4>)
 80043de:	fba3 2302 	umull	r2, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	011c      	lsls	r4, r3, #4
 80043e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004400:	415b      	adcs	r3, r3
 8004402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004408:	4641      	mov	r1, r8
 800440a:	eb12 0a01 	adds.w	sl, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb43 0b01 	adc.w	fp, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004420:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004428:	4692      	mov	sl, r2
 800442a:	469b      	mov	fp, r3
 800442c:	4643      	mov	r3, r8
 800442e:	eb1a 0303 	adds.w	r3, sl, r3
 8004432:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004436:	464b      	mov	r3, r9
 8004438:	eb4b 0303 	adc.w	r3, fp, r3
 800443c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800444c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004450:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004454:	460b      	mov	r3, r1
 8004456:	18db      	adds	r3, r3, r3
 8004458:	643b      	str	r3, [r7, #64]	@ 0x40
 800445a:	4613      	mov	r3, r2
 800445c:	eb42 0303 	adc.w	r3, r2, r3
 8004460:	647b      	str	r3, [r7, #68]	@ 0x44
 8004462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800446a:	f7fc faaf 	bl	80009cc <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4611      	mov	r1, r2
 8004474:	4b3b      	ldr	r3, [pc, #236]	@ (8004564 <UART_SetConfig+0x2d4>)
 8004476:	fba3 2301 	umull	r2, r3, r3, r1
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2264      	movs	r2, #100	@ 0x64
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	1acb      	subs	r3, r1, r3
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800448a:	4b36      	ldr	r3, [pc, #216]	@ (8004564 <UART_SetConfig+0x2d4>)
 800448c:	fba3 2302 	umull	r2, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004498:	441c      	add	r4, r3
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044b4:	415b      	adcs	r3, r3
 80044b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044bc:	4641      	mov	r1, r8
 80044be:	1851      	adds	r1, r2, r1
 80044c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80044c2:	4649      	mov	r1, r9
 80044c4:	414b      	adcs	r3, r1
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044d4:	4659      	mov	r1, fp
 80044d6:	00cb      	lsls	r3, r1, #3
 80044d8:	4651      	mov	r1, sl
 80044da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044de:	4651      	mov	r1, sl
 80044e0:	00ca      	lsls	r2, r1, #3
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	4642      	mov	r2, r8
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f0:	464b      	mov	r3, r9
 80044f2:	460a      	mov	r2, r1
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004508:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800450c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004510:	460b      	mov	r3, r1
 8004512:	18db      	adds	r3, r3, r3
 8004514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004516:	4613      	mov	r3, r2
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004522:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004526:	f7fc fa51 	bl	80009cc <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4b0d      	ldr	r3, [pc, #52]	@ (8004564 <UART_SetConfig+0x2d4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	@ 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	3332      	adds	r3, #50	@ 0x32
 8004542:	4a08      	ldr	r2, [pc, #32]	@ (8004564 <UART_SetConfig+0x2d4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 0207 	and.w	r2, r3, #7
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4422      	add	r2, r4
 8004556:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004558:	e106      	b.n	8004768 <UART_SetConfig+0x4d8>
 800455a:	bf00      	nop
 800455c:	40011000 	.word	0x40011000
 8004560:	40011400 	.word	0x40011400
 8004564:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800456c:	2200      	movs	r2, #0
 800456e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004572:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004576:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800457a:	4642      	mov	r2, r8
 800457c:	464b      	mov	r3, r9
 800457e:	1891      	adds	r1, r2, r2
 8004580:	6239      	str	r1, [r7, #32]
 8004582:	415b      	adcs	r3, r3
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
 8004586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800458a:	4641      	mov	r1, r8
 800458c:	1854      	adds	r4, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb43 0501 	adc.w	r5, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	00eb      	lsls	r3, r5, #3
 800459e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a2:	00e2      	lsls	r2, r4, #3
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	4643      	mov	r3, r8
 80045aa:	18e3      	adds	r3, r4, r3
 80045ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045b0:	464b      	mov	r3, r9
 80045b2:	eb45 0303 	adc.w	r3, r5, r3
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045d6:	4629      	mov	r1, r5
 80045d8:	008b      	lsls	r3, r1, #2
 80045da:	4621      	mov	r1, r4
 80045dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e0:	4621      	mov	r1, r4
 80045e2:	008a      	lsls	r2, r1, #2
 80045e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045e8:	f7fc f9f0 	bl	80009cc <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b60      	ldr	r3, [pc, #384]	@ (8004774 <UART_SetConfig+0x4e4>)
 80045f2:	fba3 2302 	umull	r2, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	011c      	lsls	r4, r3, #4
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004604:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004608:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	61b9      	str	r1, [r7, #24]
 8004614:	415b      	adcs	r3, r3
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800461c:	4641      	mov	r1, r8
 800461e:	1851      	adds	r1, r2, r1
 8004620:	6139      	str	r1, [r7, #16]
 8004622:	4649      	mov	r1, r9
 8004624:	414b      	adcs	r3, r1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004634:	4659      	mov	r1, fp
 8004636:	00cb      	lsls	r3, r1, #3
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463e:	4651      	mov	r1, sl
 8004640:	00ca      	lsls	r2, r1, #3
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	4603      	mov	r3, r0
 8004648:	4642      	mov	r2, r8
 800464a:	189b      	adds	r3, r3, r2
 800464c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004650:	464b      	mov	r3, r9
 8004652:	460a      	mov	r2, r1
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004666:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004674:	4649      	mov	r1, r9
 8004676:	008b      	lsls	r3, r1, #2
 8004678:	4641      	mov	r1, r8
 800467a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467e:	4641      	mov	r1, r8
 8004680:	008a      	lsls	r2, r1, #2
 8004682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004686:	f7fc f9a1 	bl	80009cc <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4611      	mov	r1, r2
 8004690:	4b38      	ldr	r3, [pc, #224]	@ (8004774 <UART_SetConfig+0x4e4>)
 8004692:	fba3 2301 	umull	r2, r3, r3, r1
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2264      	movs	r2, #100	@ 0x64
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	1acb      	subs	r3, r1, r3
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	3332      	adds	r3, #50	@ 0x32
 80046a4:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <UART_SetConfig+0x4e4>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046b0:	441c      	add	r4, r3
 80046b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b6:	2200      	movs	r2, #0
 80046b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80046bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	415b      	adcs	r3, r3
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d0:	4641      	mov	r1, r8
 80046d2:	1851      	adds	r1, r2, r1
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	4649      	mov	r1, r9
 80046d8:	414b      	adcs	r3, r1
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046e8:	4659      	mov	r1, fp
 80046ea:	00cb      	lsls	r3, r1, #3
 80046ec:	4651      	mov	r1, sl
 80046ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f2:	4651      	mov	r1, sl
 80046f4:	00ca      	lsls	r2, r1, #3
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	4642      	mov	r2, r8
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004702:	464b      	mov	r3, r9
 8004704:	460a      	mov	r2, r1
 8004706:	eb42 0303 	adc.w	r3, r2, r3
 800470a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	663b      	str	r3, [r7, #96]	@ 0x60
 8004716:	667a      	str	r2, [r7, #100]	@ 0x64
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004724:	4649      	mov	r1, r9
 8004726:	008b      	lsls	r3, r1, #2
 8004728:	4641      	mov	r1, r8
 800472a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472e:	4641      	mov	r1, r8
 8004730:	008a      	lsls	r2, r1, #2
 8004732:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004736:	f7fc f949 	bl	80009cc <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <UART_SetConfig+0x4e4>)
 8004740:	fba3 1302 	umull	r1, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	2164      	movs	r1, #100	@ 0x64
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	3332      	adds	r3, #50	@ 0x32
 8004752:	4a08      	ldr	r2, [pc, #32]	@ (8004774 <UART_SetConfig+0x4e4>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	f003 020f 	and.w	r2, r3, #15
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4422      	add	r2, r4
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800476e:	46bd      	mov	sp, r7
 8004770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004774:	51eb851f 	.word	0x51eb851f

08004778 <memset>:
 8004778:	4402      	add	r2, r0
 800477a:	4603      	mov	r3, r0
 800477c:	4293      	cmp	r3, r2
 800477e:	d100      	bne.n	8004782 <memset+0xa>
 8004780:	4770      	bx	lr
 8004782:	f803 1b01 	strb.w	r1, [r3], #1
 8004786:	e7f9      	b.n	800477c <memset+0x4>

08004788 <__libc_init_array>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4d0d      	ldr	r5, [pc, #52]	@ (80047c0 <__libc_init_array+0x38>)
 800478c:	4c0d      	ldr	r4, [pc, #52]	@ (80047c4 <__libc_init_array+0x3c>)
 800478e:	1b64      	subs	r4, r4, r5
 8004790:	10a4      	asrs	r4, r4, #2
 8004792:	2600      	movs	r6, #0
 8004794:	42a6      	cmp	r6, r4
 8004796:	d109      	bne.n	80047ac <__libc_init_array+0x24>
 8004798:	4d0b      	ldr	r5, [pc, #44]	@ (80047c8 <__libc_init_array+0x40>)
 800479a:	4c0c      	ldr	r4, [pc, #48]	@ (80047cc <__libc_init_array+0x44>)
 800479c:	f000 f818 	bl	80047d0 <_init>
 80047a0:	1b64      	subs	r4, r4, r5
 80047a2:	10a4      	asrs	r4, r4, #2
 80047a4:	2600      	movs	r6, #0
 80047a6:	42a6      	cmp	r6, r4
 80047a8:	d105      	bne.n	80047b6 <__libc_init_array+0x2e>
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b0:	4798      	blx	r3
 80047b2:	3601      	adds	r6, #1
 80047b4:	e7ee      	b.n	8004794 <__libc_init_array+0xc>
 80047b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ba:	4798      	blx	r3
 80047bc:	3601      	adds	r6, #1
 80047be:	e7f2      	b.n	80047a6 <__libc_init_array+0x1e>
 80047c0:	08004860 	.word	0x08004860
 80047c4:	08004860 	.word	0x08004860
 80047c8:	08004860 	.word	0x08004860
 80047cc:	08004864 	.word	0x08004864

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
