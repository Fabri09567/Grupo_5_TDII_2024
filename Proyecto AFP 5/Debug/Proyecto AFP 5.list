
Proyecto AFP 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f00  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080040ac  080040ac  000050ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800415c  0800415c  00006020  2**0
                  CONTENTS
  4 .ARM          00000008  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004164  08004164  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004164  08004164  00005164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800416c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006020  2**0
                  CONTENTS
 10 .bss          00000150  20000020  20000020  00006020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  00006020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db80  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002451  00000000  00000000  00013bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090d  00000000  00000000  00016be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f04  00000000  00000000  000174f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011151  00000000  00000000  0003c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da1fd  00000000  00000000  0004d54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127747  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ecc  00000000  00000000  0012778c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0012a658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004094 	.word	0x08004094

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08004094 	.word	0x08004094

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	@ 0x30
 80004f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
 800050a:	4b56      	ldr	r3, [pc, #344]	@ (8000664 <MX_GPIO_Init+0x174>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a55      	ldr	r2, [pc, #340]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b53      	ldr	r3, [pc, #332]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	61bb      	str	r3, [r7, #24]
 8000520:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	4b4f      	ldr	r3, [pc, #316]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a4e      	ldr	r2, [pc, #312]	@ (8000664 <MX_GPIO_Init+0x174>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b4c      	ldr	r3, [pc, #304]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
 8000542:	4b48      	ldr	r3, [pc, #288]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a47      	ldr	r2, [pc, #284]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b45      	ldr	r3, [pc, #276]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	4b41      	ldr	r3, [pc, #260]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a40      	ldr	r2, [pc, #256]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b3e      	ldr	r3, [pc, #248]	@ (8000664 <MX_GPIO_Init+0x174>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	4b3a      	ldr	r3, [pc, #232]	@ (8000664 <MX_GPIO_Init+0x174>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a39      	ldr	r2, [pc, #228]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b37      	ldr	r3, [pc, #220]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	4b33      	ldr	r3, [pc, #204]	@ (8000664 <MX_GPIO_Init+0x174>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a32      	ldr	r2, [pc, #200]	@ (8000664 <MX_GPIO_Init+0x174>)
 800059c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b30      	ldr	r3, [pc, #192]	@ (8000664 <MX_GPIO_Init+0x174>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005b4:	482c      	ldr	r0, [pc, #176]	@ (8000668 <MX_GPIO_Init+0x178>)
 80005b6:	f001 fadd 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c0:	482a      	ldr	r0, [pc, #168]	@ (800066c <MX_GPIO_Init+0x17c>)
 80005c2:	f001 fad7 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2140      	movs	r1, #64	@ 0x40
 80005ca:	4829      	ldr	r0, [pc, #164]	@ (8000670 <MX_GPIO_Init+0x180>)
 80005cc:	f001 fad2 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4619      	mov	r1, r3
 80005e6:	4823      	ldr	r0, [pc, #140]	@ (8000674 <MX_GPIO_Init+0x184>)
 80005e8:	f001 f900 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80005ec:	f244 0381 	movw	r3, #16513	@ 0x4081
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	4818      	ldr	r0, [pc, #96]	@ (8000668 <MX_GPIO_Init+0x178>)
 8000606:	f001 f8f1 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800060a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	4812      	ldr	r0, [pc, #72]	@ (800066c <MX_GPIO_Init+0x17c>)
 8000624:	f001 f8e2 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000628:	2340      	movs	r3, #64	@ 0x40
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_GPIO_Init+0x180>)
 8000640:	f001 f8d4 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000644:	2380      	movs	r3, #128	@ 0x80
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	@ (8000670 <MX_GPIO_Init+0x180>)
 8000658:	f001 f8c8 	bl	80017ec <HAL_GPIO_Init>

}
 800065c:	bf00      	nop
 800065e:	3730      	adds	r7, #48	@ 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40020400 	.word	0x40020400
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40021800 	.word	0x40021800
 8000674:	40020800 	.word	0x40020800

08000678 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <MX_I2C1_Init+0x74>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	@ (80006f0 <MX_I2C1_Init+0x78>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000684:	4a1b      	ldr	r2, [pc, #108]	@ (80006f4 <MX_I2C1_Init+0x7c>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006b6:	f001 fa77 	bl	8001ba8 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 faaa 	bl	8000c18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4809      	ldr	r0, [pc, #36]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006c8:	f001 ffaf 	bl	800262a <HAL_I2CEx_ConfigAnalogFilter>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006d2:	f000 faa1 	bl	8000c18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006da:	f001 ffe2 	bl	80026a2 <HAL_I2CEx_ConfigDigitalFilter>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e4:	f000 fa98 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000003c 	.word	0x2000003c
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a19      	ldr	r2, [pc, #100]	@ (800077c <HAL_I2C_MspInit+0x84>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d12c      	bne.n	8000774 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <HAL_I2C_MspInit+0x88>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <HAL_I2C_MspInit+0x88>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000736:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073c:	2312      	movs	r3, #18
 800073e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000748:	2304      	movs	r3, #4
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	480c      	ldr	r0, [pc, #48]	@ (8000784 <HAL_I2C_MspInit+0x8c>)
 8000754:	f001 f84a 	bl	80017ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <HAL_I2C_MspInit+0x88>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a07      	ldr	r2, [pc, #28]	@ (8000780 <HAL_I2C_MspInit+0x88>)
 8000762:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <HAL_I2C_MspInit+0x88>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	@ 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40005400 	.word	0x40005400
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <HAL_UART_RxCpltCallback>:
uint8_t zumbadorActivadoIR = 0; //
uint8_t rxData; // Variable para almacenar los datos recibidos
char comandoRecibido[20]; // Buffer para los comandos
uint8_t indiceComando = 0;
/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
		    if (huart->Instance == USART3) { // Comprueba que es USART3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <HAL_UART_RxCpltCallback+0x8c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d138      	bne.n	800080c <HAL_UART_RxCpltCallback+0x84>
		        if (rxData == '\n' || rxData == '\r') { // Detecta fin de comando
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <HAL_UART_RxCpltCallback+0x90>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b0a      	cmp	r3, #10
 80007a0:	d003      	beq.n	80007aa <HAL_UART_RxCpltCallback+0x22>
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <HAL_UART_RxCpltCallback+0x90>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b0d      	cmp	r3, #13
 80007a8:	d11e      	bne.n	80007e8 <HAL_UART_RxCpltCallback+0x60>
		            comandoRecibido[indiceComando] = '\0'; // Cierra el string
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <HAL_UART_RxCpltCallback+0x94>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <HAL_UART_RxCpltCallback+0x98>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	5499      	strb	r1, [r3, r2]
		            indiceComando = 0;
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <HAL_UART_RxCpltCallback+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]

		            // Compara el comando recibido
		            if (strcmp(comandoRecibido, "activar alarma") == 0) {
 80007bc:	4919      	ldr	r1, [pc, #100]	@ (8000824 <HAL_UART_RxCpltCallback+0x9c>)
 80007be:	4818      	ldr	r0, [pc, #96]	@ (8000820 <HAL_UART_RxCpltCallback+0x98>)
 80007c0:	f7ff fd14 	bl	80001ec <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <HAL_UART_RxCpltCallback+0x4a>
		                modoIR = 1; // Cambia a modo IR
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <HAL_UART_RxCpltCallback+0xa0>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
		            if (strcmp(comandoRecibido, "activar alarma") == 0) {
 80007d0:	e016      	b.n	8000800 <HAL_UART_RxCpltCallback+0x78>
		            } else if (strcmp(comandoRecibido, "desactivar alarma") == 0) {
 80007d2:	4916      	ldr	r1, [pc, #88]	@ (800082c <HAL_UART_RxCpltCallback+0xa4>)
 80007d4:	4812      	ldr	r0, [pc, #72]	@ (8000820 <HAL_UART_RxCpltCallback+0x98>)
 80007d6:	f7ff fd09 	bl	80001ec <strcmp>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10f      	bne.n	8000800 <HAL_UART_RxCpltCallback+0x78>
		                modoIR = 0; // Cambia a modo PIR
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <HAL_UART_RxCpltCallback+0xa0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
		            if (strcmp(comandoRecibido, "activar alarma") == 0) {
 80007e6:	e00b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x78>
		            }
		        } else {
		            comandoRecibido[indiceComando++] = rxData; // Guarda datos en el buffer
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_UART_RxCpltCallback+0x94>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	b2d1      	uxtb	r1, r2
 80007f0:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <HAL_UART_RxCpltCallback+0x94>)
 80007f2:	7011      	strb	r1, [r2, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <HAL_UART_RxCpltCallback+0x90>)
 80007f8:	7819      	ldrb	r1, [r3, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_UART_RxCpltCallback+0x98>)
 80007fc:	5499      	strb	r1, [r3, r2]
 80007fe:	e000      	b.n	8000802 <HAL_UART_RxCpltCallback+0x7a>
		            if (strcmp(comandoRecibido, "activar alarma") == 0) {
 8000800:	bf00      	nop
		        }

		        // Reactiva la recepción de UART
		        HAL_UART_Receive_IT(&huart3, &rxData, 1);
 8000802:	2201      	movs	r2, #1
 8000804:	4904      	ldr	r1, [pc, #16]	@ (8000818 <HAL_UART_RxCpltCallback+0x90>)
 8000806:	480a      	ldr	r0, [pc, #40]	@ (8000830 <HAL_UART_RxCpltCallback+0xa8>)
 8000808:	f002 fc80 	bl	800310c <HAL_UART_Receive_IT>
		    }
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004800 	.word	0x40004800
 8000818:	200000d3 	.word	0x200000d3
 800081c:	200000e8 	.word	0x200000e8
 8000820:	200000d4 	.word	0x200000d4
 8000824:	080040ac 	.word	0x080040ac
 8000828:	200000c0 	.word	0x200000c0
 800082c:	080040bc 	.word	0x080040bc
 8000830:	200000ec 	.word	0x200000ec

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083a:	f000 fd9d 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083e:	f000 f97f 	bl	8000b40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  // Habilitar el reloj de los puertos GPIO
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4ba8      	ldr	r3, [pc, #672]	@ (8000af8 <main+0x2c4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4aa7      	ldr	r2, [pc, #668]	@ (8000af8 <main+0x2c4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4ba5      	ldr	r3, [pc, #660]	@ (8000af8 <main+0x2c4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4ba1      	ldr	r3, [pc, #644]	@ (8000af8 <main+0x2c4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4aa0      	ldr	r2, [pc, #640]	@ (8000af8 <main+0x2c4>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b9e      	ldr	r3, [pc, #632]	@ (8000af8 <main+0x2c4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b9a      	ldr	r3, [pc, #616]	@ (8000af8 <main+0x2c4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a99      	ldr	r2, [pc, #612]	@ (8000af8 <main+0x2c4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b97      	ldr	r3, [pc, #604]	@ (8000af8 <main+0x2c4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b93      	ldr	r3, [pc, #588]	@ (8000af8 <main+0x2c4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a92      	ldr	r2, [pc, #584]	@ (8000af8 <main+0x2c4>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b90      	ldr	r3, [pc, #576]	@ (8000af8 <main+0x2c4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  // Configuración del pin del sensor IR (entrada)
  GPIO_InitStruct.Pin = SENSOR_IR_PIN;
 80008c2:	2301      	movs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;  // Sin resistencias internas
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4889      	ldr	r0, [pc, #548]	@ (8000afc <main+0x2c8>)
 80008d6:	f000 ff89 	bl	80017ec <HAL_GPIO_Init>

  // Configuración del pin del sensor PIR (entrada)
  GPIO_InitStruct.Pin = SENSOR_PIR_PIN;
 80008da:	2302      	movs	r3, #2
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	4884      	ldr	r0, [pc, #528]	@ (8000b00 <main+0x2cc>)
 80008ee:	f000 ff7d 	bl	80017ec <HAL_GPIO_Init>

  // Configuración del pin del buzzer (salida)
  GPIO_InitStruct.Pin = BUZZER_PIN;
 80008f2:	2301      	movs	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull para salida
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Baja velocidad
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	487d      	ldr	r0, [pc, #500]	@ (8000b00 <main+0x2cc>)
 800090a:	f000 ff6f 	bl	80017ec <HAL_GPIO_Init>

  //Configuracion del pin de recepcion UART del HC-05.
      GPIO_InitStruct.Pin = RX_PIN;
 800090e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000912:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000920:	2307      	movs	r3, #7
 8000922:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4876      	ldr	r0, [pc, #472]	@ (8000b04 <main+0x2d0>)
 800092c:	f000 ff5e 	bl	80017ec <HAL_GPIO_Init>

      //Configuracion del pin de Transmision UART del HC-05.
      GPIO_InitStruct.Pin = TX_PIN;
 8000930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000934:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000936:	2312      	movs	r3, #18
 8000938:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000942:	2307      	movs	r3, #7
 8000944:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <main+0x2d0>)
 800094e:	f000 ff4d 	bl	80017ec <HAL_GPIO_Init>

      //Inicializar UART3.
          huart3.Instance = USART3;
 8000952:	4b6d      	ldr	r3, [pc, #436]	@ (8000b08 <main+0x2d4>)
 8000954:	4a6d      	ldr	r2, [pc, #436]	@ (8000b0c <main+0x2d8>)
 8000956:	601a      	str	r2, [r3, #0]
          huart3.Init.BaudRate = 9600;
 8000958:	4b6b      	ldr	r3, [pc, #428]	@ (8000b08 <main+0x2d4>)
 800095a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800095e:	605a      	str	r2, [r3, #4]
          huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000960:	4b69      	ldr	r3, [pc, #420]	@ (8000b08 <main+0x2d4>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
          huart3.Init.StopBits = UART_STOPBITS_1;
 8000966:	4b68      	ldr	r3, [pc, #416]	@ (8000b08 <main+0x2d4>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
          huart3.Init.Parity = UART_PARITY_NONE;
 800096c:	4b66      	ldr	r3, [pc, #408]	@ (8000b08 <main+0x2d4>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
          huart3.Init.Mode = UART_MODE_TX_RX;
 8000972:	4b65      	ldr	r3, [pc, #404]	@ (8000b08 <main+0x2d4>)
 8000974:	220c      	movs	r2, #12
 8000976:	615a      	str	r2, [r3, #20]
          huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000978:	4b63      	ldr	r3, [pc, #396]	@ (8000b08 <main+0x2d4>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
          huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097e:	4b62      	ldr	r3, [pc, #392]	@ (8000b08 <main+0x2d4>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
          if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000984:	4860      	ldr	r0, [pc, #384]	@ (8000b08 <main+0x2d4>)
 8000986:	f002 fb63 	bl	8003050 <HAL_UART_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <main+0x160>
              Error_Handler();
 8000990:	f000 f942 	bl	8000c18 <Error_Handler>
          }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f7ff fdac 	bl	80004f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000998:	f000 f9b8 	bl	8000d0c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800099c:	f7ff fe6c 	bl	8000678 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80009a0:	2002      	movs	r0, #2
 80009a2:	f000 faef 	bl	8000f84 <HD44780_Init>
  HD44780_Clear();
 80009a6:	f000 fb71 	bl	800108c <HD44780_Clear>
  HD44780_SetCursor(0,0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fb83 	bl	80010b8 <HD44780_SetCursor>
  HD44780_PrintStr("Proyecto");
 80009b2:	4857      	ldr	r0, [pc, #348]	@ (8000b10 <main+0x2dc>)
 80009b4:	f000 fbf1 	bl	800119a <HD44780_PrintStr>
  HD44780_SetCursor(3,1);
 80009b8:	2101      	movs	r1, #1
 80009ba:	2003      	movs	r0, #3
 80009bc:	f000 fb7c 	bl	80010b8 <HD44780_SetCursor>
  HD44780_PrintStr("Digitales II");
 80009c0:	4854      	ldr	r0, [pc, #336]	@ (8000b14 <main+0x2e0>)
 80009c2:	f000 fbea 	bl	800119a <HD44780_PrintStr>
  HAL_Delay(3000);
 80009c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80009ca:	f000 fd47 	bl	800145c <HAL_Delay>
  HD44780_Display();
 80009ce:	f000 fba5 	bl	800111c <HD44780_Display>

  HAL_UART_Receive_IT(&huart3, &rxData, 1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	4950      	ldr	r1, [pc, #320]	@ (8000b18 <main+0x2e4>)
 80009d6:	484c      	ldr	r0, [pc, #304]	@ (8000b08 <main+0x2d4>)
 80009d8:	f002 fb98 	bl	800310c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (modoIR) {
 80009dc:	4b4f      	ldr	r3, [pc, #316]	@ (8000b1c <main+0x2e8>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d04f      	beq.n	8000a84 <main+0x250>

	    		  HAL_GPIO_WritePin(GPIOD, LED_PIN, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ea:	484d      	ldr	r0, [pc, #308]	@ (8000b20 <main+0x2ec>)
 80009ec:	f001 f8c2 	bl	8001b74 <HAL_GPIO_WritePin>
	    	          if (alarmaIRActivada == 0) {
 80009f0:	4b4c      	ldr	r3, [pc, #304]	@ (8000b24 <main+0x2f0>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d11b      	bne.n	8000a30 <main+0x1fc>
	    	        	  activando_alarma();
 80009f8:	f000 fa2c 	bl	8000e54 <activando_alarma>
	    	              // Esperar 3 segundos antes de activar el sensor IR
	    	              if (tiempoActivacionIR == 0) {
 80009fc:	4b4a      	ldr	r3, [pc, #296]	@ (8000b28 <main+0x2f4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d104      	bne.n	8000a0e <main+0x1da>
	    	                  tiempoActivacionIR = HAL_GetTick();
 8000a04:	f000 fd1e 	bl	8001444 <HAL_GetTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a47      	ldr	r2, [pc, #284]	@ (8000b28 <main+0x2f4>)
 8000a0c:	6013      	str	r3, [r2, #0]
	    	              }

	    	              if (HAL_GetTick() - tiempoActivacionIR >= 3000) {
 8000a0e:	f000 fd19 	bl	8001444 <HAL_GetTick>
 8000a12:	4602      	mov	r2, r0
 8000a14:	4b44      	ldr	r3, [pc, #272]	@ (8000b28 <main+0x2f4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d9dc      	bls.n	80009dc <main+0x1a8>
	    	                  alarmaIRActivada = 1; // Activar alarma IR después de 3 segundos
 8000a22:	4b40      	ldr	r3, [pc, #256]	@ (8000b24 <main+0x2f0>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
	    	                  tiempoActivacionIR = 0; // Reiniciar el tiempo de activación
 8000a28:	4b3f      	ldr	r3, [pc, #252]	@ (8000b28 <main+0x2f4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	e7d5      	b.n	80009dc <main+0x1a8>
	    	              }
	    	          } else {
	    	              // Modo IR activado
	    	              GPIO_PinState sensorEstadoIR = HAL_GPIO_ReadPin(GPIOA, SENSOR_IR_PIN);
 8000a30:	2101      	movs	r1, #1
 8000a32:	4832      	ldr	r0, [pc, #200]	@ (8000afc <main+0x2c8>)
 8000a34:	f001 f886 	bl	8001b44 <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	    	              if (sensorEstadoIR == GPIO_PIN_RESET && conteoIRIniciado == 0) {
 8000a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10b      	bne.n	8000a5e <main+0x22a>
 8000a46:	4b39      	ldr	r3, [pc, #228]	@ (8000b2c <main+0x2f8>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d107      	bne.n	8000a5e <main+0x22a>
	    	                  // Detección de movimiento IR, iniciar conteo
	    	                  tiempoDeteccionIR = HAL_GetTick();
 8000a4e:	f000 fcf9 	bl	8001444 <HAL_GetTick>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a36      	ldr	r2, [pc, #216]	@ (8000b30 <main+0x2fc>)
 8000a56:	6013      	str	r3, [r2, #0]
	    	                  conteoIRIniciado = 1;
 8000a58:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <main+0x2f8>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
	    	              }

	    	              if (conteoIRIniciado) {
 8000a5e:	4b33      	ldr	r3, [pc, #204]	@ (8000b2c <main+0x2f8>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <main+0x236>
	    	                  alarma_conteo();
 8000a66:	f000 fa31 	bl	8000ecc <alarma_conteo>
	    	              }
	    	              if (zumbadorActivadoIR == 1){
 8000a6a:	4b32      	ldr	r3, [pc, #200]	@ (8000b34 <main+0x300>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d102      	bne.n	8000a78 <main+0x244>
	    	                  alarma_sonando();
 8000a72:	f000 fa11 	bl	8000e98 <alarma_sonando>
 8000a76:	e7b1      	b.n	80009dc <main+0x1a8>
	    	              }else{
	    	                  HAL_GPIO_WritePin(GPIOB, BUZZER_PIN, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4820      	ldr	r0, [pc, #128]	@ (8000b00 <main+0x2cc>)
 8000a7e:	f001 f879 	bl	8001b74 <HAL_GPIO_WritePin>
 8000a82:	e7ab      	b.n	80009dc <main+0x1a8>
	    	              }
	    	          }
	    	      } else {
	    	          // Modo PIR: Si el sensor PIR detecta algo (señal HIGH), enciende el led
	    	          GPIO_PinState sensorEstadoPIR = HAL_GPIO_ReadPin(GPIOB, SENSOR_PIR_PIN);
 8000a84:	2102      	movs	r1, #2
 8000a86:	481e      	ldr	r0, [pc, #120]	@ (8000b00 <main+0x2cc>)
 8000a88:	f001 f85c 	bl	8001b44 <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	    	          HAL_GPIO_WritePin(GPIOB, BUZZER_PIN, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2101      	movs	r1, #1
 8000a96:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <main+0x2cc>)
 8000a98:	f001 f86c 	bl	8001b74 <HAL_GPIO_WritePin>
	    	          HAL_GPIO_WritePin(GPIOD, LED_PIN, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa2:	481f      	ldr	r0, [pc, #124]	@ (8000b20 <main+0x2ec>)
 8000aa4:	f001 f866 	bl	8001b74 <HAL_GPIO_WritePin>
	    	          if (sensorEstadoPIR == GPIO_PIN_SET) {
 8000aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d102      	bne.n	8000ab6 <main+0x282>
	    	              led_on();
 8000ab0:	f000 fa2c 	bl	8000f0c <led_on>
 8000ab4:	e00b      	b.n	8000ace <main+0x29a>
	    	          } else {
	    	        	  if (HAL_GetTick() - tiempoUltimoMovimiento >= tiempoEspera) {
 8000ab6:	f000 fcc5 	bl	8001444 <HAL_GetTick>
 8000aba:	4602      	mov	r2, r0
 8000abc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <main+0x304>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	1ad2      	subs	r2, r2, r3
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <main+0x308>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d301      	bcc.n	8000ace <main+0x29a>
	    	        		  led_off();
 8000aca:	f000 fa33 	bl	8000f34 <led_off>
	    	        	    }
	    	          }
	    	          alarma_desactivada();
 8000ace:	f000 fa3d 	bl	8000f4c <alarma_desactivada>
	    	          alarmaIRActivada = 0; // Reiniciar estado IR al cambiar a PIR
 8000ad2:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <main+0x2f0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
	    	          conteoIRIniciado = 0;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <main+0x2f8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
	    	          zumbadorActivadoIR = 0; //asegurar que el zumbador este apagado.
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <main+0x300>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
	    	          HAL_GPIO_WritePin(GPIOB, BUZZER_PIN, GPIO_PIN_RESET); //asegurar que el buzzer este apagado.
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <main+0x2cc>)
 8000aea:	f001 f843 	bl	8001b74 <HAL_GPIO_WritePin>
	    	          tiempoActivacionIR =0; //reiniciar tiempo de activacion para la siguiente vez que se active el modo IR.
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <main+0x2f4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
	  if (modoIR) {
 8000af4:	e772      	b.n	80009dc <main+0x1a8>
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40020800 	.word	0x40020800
 8000b08:	200000ec 	.word	0x200000ec
 8000b0c:	40004800 	.word	0x40004800
 8000b10:	080040d0 	.word	0x080040d0
 8000b14:	080040dc 	.word	0x080040dc
 8000b18:	200000d3 	.word	0x200000d3
 8000b1c:	200000c0 	.word	0x200000c0
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	200000d0 	.word	0x200000d0
 8000b28:	200000c8 	.word	0x200000c8
 8000b2c:	200000d1 	.word	0x200000d1
 8000b30:	200000cc 	.word	0x200000cc
 8000b34:	200000d2 	.word	0x200000d2
 8000b38:	200000c4 	.word	0x200000c4
 8000b3c:	20000000 	.word	0x20000000

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	@ 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 fa74 	bl	800403c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	4a28      	ldr	r2, [pc, #160]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	2302      	movs	r3, #2
 8000bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bb8:	2348      	movs	r3, #72	@ 0x48
 8000bba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fda9 	bl	8002720 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bd4:	f000 f820 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 f80a 	bl	8002c10 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c02:	f000 f809 	bl	8000c18 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	@ 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	4a0f      	ldr	r2, [pc, #60]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 fba7 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <USART3_IRQHandler+0x10>)
 8000cda:	f002 fa3d 	bl	8003158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000ec 	.word	0x200000ec

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <MX_USART3_UART_Init+0x50>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d44:	f002 f984 	bl	8003050 <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d4e:	f7ff ff63 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000ec 	.word	0x200000ec
 8000d5c:	40004800 	.word	0x40004800

08000d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <HAL_UART_MspInit+0x94>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d134      	bne.n	8000dec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <HAL_UART_MspInit+0x9c>)
 8000dd8:	f000 fd08 	bl	80017ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2027      	movs	r0, #39	@ 0x27
 8000de2:	f000 fc3a 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000de6:	2027      	movs	r0, #39	@ 0x27
 8000de8:	f000 fc53 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	@ 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40004800 	.word	0x40004800
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020c00 	.word	0x40020c00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e04:	f7ff ff70 	bl	8000ce8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f003 f90d 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fcff 	bl	8000834 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000e44:	0800416c 	.word	0x0800416c
  ldr r2, =_sbss
 8000e48:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000e4c:	20000170 	.word	0x20000170

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <activando_alarma>:
extern uint32_t tiempoDeteccionIR;
extern uint8_t modoIR;
extern uint8_t zumbadorActivadoIR;
extern uint8_t conteoIRIniciado;

void activando_alarma(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8000e58:	f000 f918 	bl	800108c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f92a 	bl	80010b8 <HD44780_SetCursor>
	HD44780_PrintStr("Activando alarma");
 8000e64:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <activando_alarma+0x3c>)
 8000e66:	f000 f998 	bl	800119a <HD44780_PrintStr>
	HAL_Delay(3000);
 8000e6a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e6e:	f000 faf5 	bl	800145c <HAL_Delay>
	HD44780_Clear();
 8000e72:	f000 f90b 	bl	800108c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000e76:	2100      	movs	r1, #0
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 f91d 	bl	80010b8 <HD44780_SetCursor>
	HD44780_PrintStr("Alarma activada");
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <activando_alarma+0x40>)
 8000e80:	f000 f98b 	bl	800119a <HD44780_PrintStr>
	HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	@ 0x64
 8000e86:	f000 fae9 	bl	800145c <HAL_Delay>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	080040ec 	.word	0x080040ec
 8000e94:	08004100 	.word	0x08004100

08000e98 <alarma_sonando>:

void alarma_sonando(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BUZZER_PIN, GPIO_PIN_SET); //encender el zumbador.
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <alarma_sonando+0x2c>)
 8000ea2:	f000 fe67 	bl	8001b74 <HAL_GPIO_WritePin>
	HD44780_Clear();
 8000ea6:	f000 f8f1 	bl	800108c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 f903 	bl	80010b8 <HD44780_SetCursor>
	HD44780_PrintStr("Alarma Sonando");
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <alarma_sonando+0x30>)
 8000eb4:	f000 f971 	bl	800119a <HD44780_PrintStr>
	HAL_Delay(100);
 8000eb8:	2064      	movs	r0, #100	@ 0x64
 8000eba:	f000 facf 	bl	800145c <HAL_Delay>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	08004110 	.word	0x08004110

08000ecc <alarma_conteo>:

void alarma_conteo(void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - tiempoDeteccionIR >= 3000) {
 8000ed0:	f000 fab8 	bl	8001444 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <alarma_conteo+0x30>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d909      	bls.n	8000ef8 <alarma_conteo+0x2c>
		// 3 segundos transcurridos, verificar si se cambió a modo PIR
		if (modoIR) {
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <alarma_conteo+0x34>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <alarma_conteo+0x26>
		zumbadorActivadoIR = 1;
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <alarma_conteo+0x38>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
		}
		conteoIRIniciado = 0;
 8000ef2:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <alarma_conteo+0x3c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
	}
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000cc 	.word	0x200000cc
 8000f00:	200000c0 	.word	0x200000c0
 8000f04:	200000d2 	.word	0x200000d2
 8000f08:	200000d1 	.word	0x200000d1

08000f0c <led_on>:
#define LED_PIN GPIO_PIN_15			// pin de salida de led

extern uint32_t tiempoUltimoMovimiento;


void led_on(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED_PIN, GPIO_PIN_SET); // Encender led
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <led_on+0x20>)
 8000f18:	f000 fe2c 	bl	8001b74 <HAL_GPIO_WritePin>
	tiempoUltimoMovimiento = HAL_GetTick();
 8000f1c:	f000 fa92 	bl	8001444 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a03      	ldr	r2, [pc, #12]	@ (8000f30 <led_on+0x24>)
 8000f24:	6013      	str	r3, [r2, #0]
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	200000c4 	.word	0x200000c4

08000f34 <led_off>:

void led_off(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED_PIN, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f3e:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <led_off+0x14>)
 8000f40:	f000 fe18 	bl	8001b74 <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020c00 	.word	0x40020c00

08000f4c <alarma_desactivada>:

void alarma_desactivada(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8000f50:	f000 f89c 	bl	800108c <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8000f54:	2100      	movs	r1, #0
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f8ae 	bl	80010b8 <HD44780_SetCursor>
	HD44780_PrintStr("Alarma");
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <alarma_desactivada+0x30>)
 8000f5e:	f000 f91c 	bl	800119a <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8000f62:	2101      	movs	r1, #1
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f8a7 	bl	80010b8 <HD44780_SetCursor>
	HD44780_PrintStr("Desactivada");
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <alarma_desactivada+0x34>)
 8000f6c:	f000 f915 	bl	800119a <HD44780_PrintStr>
	HAL_Delay(100);
 8000f70:	2064      	movs	r0, #100	@ 0x64
 8000f72:	f000 fa73 	bl	800145c <HAL_Delay>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08004120 	.word	0x08004120
 8000f80:	08004128 	.word	0x08004128

08000f84 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f8e:	4a38      	ldr	r2, [pc, #224]	@ (8001070 <HD44780_Init+0xec>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000f94:	4b37      	ldr	r3, [pc, #220]	@ (8001074 <HD44780_Init+0xf0>)
 8000f96:	2208      	movs	r2, #8
 8000f98:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f9a:	4b37      	ldr	r3, [pc, #220]	@ (8001078 <HD44780_Init+0xf4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000fa0:	4b33      	ldr	r3, [pc, #204]	@ (8001070 <HD44780_Init+0xec>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d907      	bls.n	8000fb8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <HD44780_Init+0xf4>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <HD44780_Init+0xf4>)
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e006      	b.n	8000fc6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <HD44780_Init+0xf4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <HD44780_Init+0xf4>)
 8000fc4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000fc6:	f000 f985 	bl	80012d4 <DelayInit>
  HAL_Delay(50);
 8000fca:	2032      	movs	r0, #50	@ 0x32
 8000fcc:	f000 fa46 	bl	800145c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000fd0:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <HD44780_Init+0xf0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f943 	bl	8001260 <ExpanderWrite>
  HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fde:	f000 fa3d 	bl	800145c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000fe2:	2030      	movs	r0, #48	@ 0x30
 8000fe4:	f000 f92b 	bl	800123e <Write4Bits>
  DelayUS(4500);
 8000fe8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000fec:	f000 f99c 	bl	8001328 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ff0:	2030      	movs	r0, #48	@ 0x30
 8000ff2:	f000 f924 	bl	800123e <Write4Bits>
  DelayUS(4500);
 8000ff6:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ffa:	f000 f995 	bl	8001328 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ffe:	2030      	movs	r0, #48	@ 0x30
 8001000:	f000 f91d 	bl	800123e <Write4Bits>
  DelayUS(4500);
 8001004:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001008:	f000 f98e 	bl	8001328 <DelayUS>

  Write4Bits(0x02 << 4);
 800100c:	2020      	movs	r0, #32
 800100e:	f000 f916 	bl	800123e <Write4Bits>
  DelayUS(100);
 8001012:	2064      	movs	r0, #100	@ 0x64
 8001014:	f000 f988 	bl	8001328 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <HD44780_Init+0xf4>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f8ce 	bl	80011c4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <HD44780_Init+0xf8>)
 800102a:	2204      	movs	r2, #4
 800102c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800102e:	f000 f875 	bl	800111c <HD44780_Display>
  HD44780_Clear();
 8001032:	f000 f82b 	bl	800108c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HD44780_Init+0xfc>)
 8001038:	2202      	movs	r2, #2
 800103a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800103c:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <HD44780_Init+0xfc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f8bc 	bl	80011c4 <SendCommand>
  DelayUS(4500);
 800104c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001050:	f000 f96a 	bl	8001328 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001054:	490b      	ldr	r1, [pc, #44]	@ (8001084 <HD44780_Init+0x100>)
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f876 	bl	8001148 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800105c:	490a      	ldr	r1, [pc, #40]	@ (8001088 <HD44780_Init+0x104>)
 800105e:	2001      	movs	r0, #1
 8001060:	f000 f872 	bl	8001148 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001064:	f000 f81d 	bl	80010a2 <HD44780_Home>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000167 	.word	0x20000167
 8001074:	20000168 	.word	0x20000168
 8001078:	20000164 	.word	0x20000164
 800107c:	20000165 	.word	0x20000165
 8001080:	20000166 	.word	0x20000166
 8001084:	20000008 	.word	0x20000008
 8001088:	20000010 	.word	0x20000010

0800108c <HD44780_Clear>:

void HD44780_Clear()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001090:	2001      	movs	r0, #1
 8001092:	f000 f897 	bl	80011c4 <SendCommand>
  DelayUS(2000);
 8001096:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800109a:	f000 f945 	bl	8001328 <DelayUS>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HD44780_Home>:

void HD44780_Home()
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80010a6:	2002      	movs	r0, #2
 80010a8:	f000 f88c 	bl	80011c4 <SendCommand>
  DelayUS(2000);
 80010ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010b0:	f000 f93a 	bl	8001328 <DelayUS>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HD44780_SetCursor+0x5c>)
 80010ca:	f107 0408 	add.w	r4, r7, #8
 80010ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <HD44780_SetCursor+0x60>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	79ba      	ldrb	r2, [r7, #6]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d303      	bcc.n	80010e6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <HD44780_SetCursor+0x60>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	3318      	adds	r3, #24
 80010ec:	443b      	add	r3, r7
 80010ee:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4413      	add	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f85d 	bl	80011c4 <SendCommand>
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd90      	pop	{r4, r7, pc}
 8001112:	bf00      	nop
 8001114:	08004134 	.word	0x08004134
 8001118:	20000167 	.word	0x20000167

0800111c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HD44780_Display+0x28>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HD44780_Display+0x28>)
 800112c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HD44780_Display+0x28>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f843 	bl	80011c4 <SendCommand>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000165 	.word	0x20000165

08001148 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001166:	b25b      	sxtb	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f82a 	bl	80011c4 <SendCommand>
  for (int i=0; i<8; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e009      	b.n	800118a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f82e 	bl	80011e0 <SendChar>
  for (int i=0; i<8; i++)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b07      	cmp	r3, #7
 800118e:	ddf2      	ble.n	8001176 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80011a2:	e006      	b.n	80011b2 <HD44780_PrintStr+0x18>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f817 	bl	80011e0 <SendChar>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f4      	bne.n	80011a4 <HD44780_PrintStr+0xa>
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f812 	bl	80011fc <Send>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f804 	bl	80011fc <Send>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	4613      	mov	r3, r2
 800120a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f023 030f 	bic.w	r3, r3, #15
 8001212:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	4313      	orrs	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f80b 	bl	800123e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001228:	7bba      	ldrb	r2, [r7, #14]
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	4313      	orrs	r3, r2
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f804 	bl	800123e <Write4Bits>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f808 	bl	8001260 <ExpanderWrite>
  PulseEnable(value);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f820 	bl	8001298 <PulseEnable>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <ExpanderWrite+0x30>)
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4313      	orrs	r3, r2
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001276:	f107 020f 	add.w	r2, r7, #15
 800127a:	230a      	movs	r3, #10
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	214e      	movs	r1, #78	@ 0x4e
 8001282:	4804      	ldr	r0, [pc, #16]	@ (8001294 <ExpanderWrite+0x34>)
 8001284:	f000 fe10 	bl	8001ea8 <HAL_I2C_Master_Transmit>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000168 	.word	0x20000168
 8001294:	2000003c 	.word	0x2000003c

08001298 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffd8 	bl	8001260 <ExpanderWrite>
  DelayUS(20);
 80012b0:	2014      	movs	r0, #20
 80012b2:	f000 f839 	bl	8001328 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ffce 	bl	8001260 <ExpanderWrite>
  DelayUS(20);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f000 f82f 	bl	8001328 <DelayUS>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <DelayInit>:

static void DelayInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <DelayInit+0x4c>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <DelayInit+0x4c>)
 80012de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012e2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <DelayInit+0x4c>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <DelayInit+0x4c>)
 80012ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012ee:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <DelayInit+0x50>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <DelayInit+0x50>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <DelayInit+0x50>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <DelayInit+0x50>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <DelayInit+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800130e:	bf00      	nop
  __ASM volatile ("NOP");
 8001310:	bf00      	nop
  __ASM volatile ("NOP");
 8001312:	bf00      	nop
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000edf0 	.word	0xe000edf0
 8001324:	e0001000 	.word	0xe0001000

08001328 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <DelayUS+0x44>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <DelayUS+0x48>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9a      	lsrs	r2, r3, #18
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <DelayUS+0x4c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <DelayUS+0x4c>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f6      	bhi.n	800134a <DelayUS+0x22>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	371c      	adds	r7, #28
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000004 	.word	0x20000004
 8001370:	431bde83 	.word	0x431bde83
 8001374:	e0001000 	.word	0xe0001000

08001378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <HAL_Init+0x40>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_Init+0x40>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_Init+0x40>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800139e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f94f 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 f808 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ac:	f7ff fc3a 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023c00 	.word	0x40023c00

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f967 	bl	80016ae <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f92f 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	@ (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000004 	.word	0x20000004
 8001414:	2000001c 	.word	0x2000001c
 8001418:	20000018 	.word	0x20000018

0800141c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_IncTick+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_IncTick+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <HAL_IncTick+0x24>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000001c 	.word	0x2000001c
 8001440:	2000016c 	.word	0x2000016c

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2000016c 	.word	0x2000016c

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffde 	bl	8001444 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000001c 	.word	0x2000001c

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	@ (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff feb6 	bl	8001444 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d008      	beq.n	80016f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2280      	movs	r2, #128	@ 0x80
 80016ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e052      	b.n	800179e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0216 	bic.w	r2, r2, #22
 8001706:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001716:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <HAL_DMA_Abort+0x62>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0208 	bic.w	r2, r2, #8
 8001736:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001748:	e013      	b.n	8001772 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174a:	f7ff fe7b 	bl	8001444 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b05      	cmp	r3, #5
 8001756:	d90c      	bls.n	8001772 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2220      	movs	r2, #32
 800175c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e015      	b.n	800179e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e4      	bne.n	800174a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001784:	223f      	movs	r2, #63	@ 0x3f
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d004      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2280      	movs	r2, #128	@ 0x80
 80017be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e00c      	b.n	80017de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2205      	movs	r2, #5
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e177      	b.n	8001af8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8166 	bne.w	8001af2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d005      	beq.n	800183e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	2b02      	cmp	r3, #2
 800183c:	d130      	bne.n	80018a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 0201 	and.w	r2, r3, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d017      	beq.n	80018dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d123      	bne.n	8001930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	69b9      	ldr	r1, [r7, #24]
 800192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80c0 	beq.w	8001af2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b66      	ldr	r3, [pc, #408]	@ (8001b10 <HAL_GPIO_Init+0x324>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_GPIO_Init+0x324>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b63      	ldr	r3, [pc, #396]	@ (8001b10 <HAL_GPIO_Init+0x324>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198e:	4a61      	ldr	r2, [pc, #388]	@ (8001b14 <HAL_GPIO_Init+0x328>)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a58      	ldr	r2, [pc, #352]	@ (8001b18 <HAL_GPIO_Init+0x32c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d037      	beq.n	8001a2a <HAL_GPIO_Init+0x23e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a57      	ldr	r2, [pc, #348]	@ (8001b1c <HAL_GPIO_Init+0x330>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d031      	beq.n	8001a26 <HAL_GPIO_Init+0x23a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a56      	ldr	r2, [pc, #344]	@ (8001b20 <HAL_GPIO_Init+0x334>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d02b      	beq.n	8001a22 <HAL_GPIO_Init+0x236>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a55      	ldr	r2, [pc, #340]	@ (8001b24 <HAL_GPIO_Init+0x338>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d025      	beq.n	8001a1e <HAL_GPIO_Init+0x232>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a54      	ldr	r2, [pc, #336]	@ (8001b28 <HAL_GPIO_Init+0x33c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01f      	beq.n	8001a1a <HAL_GPIO_Init+0x22e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a53      	ldr	r2, [pc, #332]	@ (8001b2c <HAL_GPIO_Init+0x340>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_GPIO_Init+0x22a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_GPIO_Init+0x344>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x226>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a51      	ldr	r2, [pc, #324]	@ (8001b34 <HAL_GPIO_Init+0x348>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x222>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a50      	ldr	r2, [pc, #320]	@ (8001b38 <HAL_GPIO_Init+0x34c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x21e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4f      	ldr	r2, [pc, #316]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x21a>
 8001a02:	2309      	movs	r3, #9
 8001a04:	e012      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a06:	230a      	movs	r3, #10
 8001a08:	e010      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	e00e      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a0e:	2307      	movs	r3, #7
 8001a10:	e00c      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a12:	2306      	movs	r3, #6
 8001a14:	e00a      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a16:	2305      	movs	r3, #5
 8001a18:	e008      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e004      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f002 0203 	and.w	r2, r2, #3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3c:	4935      	ldr	r1, [pc, #212]	@ (8001b14 <HAL_GPIO_Init+0x328>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6e:	4a34      	ldr	r2, [pc, #208]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a74:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a98:	4a29      	ldr	r2, [pc, #164]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aec:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b0f      	cmp	r3, #15
 8001afc:	f67f ae84 	bls.w	8001808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3724      	adds	r7, #36	@ 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40021c00 	.word	0x40021c00
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40022400 	.word	0x40022400
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b90:	e003      	b.n	8001b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e171      	b.n	8001e9e <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d12c      	bne.n	8001c20 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a77      	ldr	r2, [pc, #476]	@ (8001db0 <HAL_I2C_Init+0x208>)
 8001bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a77      	ldr	r2, [pc, #476]	@ (8001db4 <HAL_I2C_Init+0x20c>)
 8001bd8:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a76      	ldr	r2, [pc, #472]	@ (8001db8 <HAL_I2C_Init+0x210>)
 8001bde:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a76      	ldr	r2, [pc, #472]	@ (8001dbc <HAL_I2C_Init+0x214>)
 8001be4:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a75      	ldr	r2, [pc, #468]	@ (8001dc0 <HAL_I2C_Init+0x218>)
 8001bea:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a75      	ldr	r2, [pc, #468]	@ (8001dc4 <HAL_I2C_Init+0x21c>)
 8001bf0:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a74      	ldr	r2, [pc, #464]	@ (8001dc8 <HAL_I2C_Init+0x220>)
 8001bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a74      	ldr	r2, [pc, #464]	@ (8001dcc <HAL_I2C_Init+0x224>)
 8001bfc:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a73      	ldr	r2, [pc, #460]	@ (8001dd0 <HAL_I2C_Init+0x228>)
 8001c02:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a73      	ldr	r2, [pc, #460]	@ (8001dd4 <HAL_I2C_Init+0x22c>)
 8001c08:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a70      	ldr	r2, [pc, #448]	@ (8001dd8 <HAL_I2C_Init+0x230>)
 8001c16:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	@ 0x24
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c58:	f001 f9d2 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8001c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a5e      	ldr	r2, [pc, #376]	@ (8001ddc <HAL_I2C_Init+0x234>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d807      	bhi.n	8001c78 <HAL_I2C_Init+0xd0>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001de0 <HAL_I2C_Init+0x238>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	bf94      	ite	ls
 8001c70:	2301      	movls	r3, #1
 8001c72:	2300      	movhi	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	e006      	b.n	8001c86 <HAL_I2C_Init+0xde>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001de4 <HAL_I2C_Init+0x23c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e107      	b.n	8001e9e <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4a55      	ldr	r2, [pc, #340]	@ (8001de8 <HAL_I2C_Init+0x240>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0c9b      	lsrs	r3, r3, #18
 8001c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4a47      	ldr	r2, [pc, #284]	@ (8001ddc <HAL_I2C_Init+0x234>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d802      	bhi.n	8001cc8 <HAL_I2C_Init+0x120>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	e009      	b.n	8001cdc <HAL_I2C_Init+0x134>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	4a46      	ldr	r2, [pc, #280]	@ (8001dec <HAL_I2C_Init+0x244>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	3301      	adds	r3, #1
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4939      	ldr	r1, [pc, #228]	@ (8001ddc <HAL_I2C_Init+0x234>)
 8001cf8:	428b      	cmp	r3, r1
 8001cfa:	d819      	bhi.n	8001d30 <HAL_I2C_Init+0x188>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1e59      	subs	r1, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d0a:	1c59      	adds	r1, r3, #1
 8001d0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d10:	400b      	ands	r3, r1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_I2C_Init+0x184>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1e59      	subs	r1, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2a:	e071      	b.n	8001e10 <HAL_I2C_Init+0x268>
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	e06f      	b.n	8001e10 <HAL_I2C_Init+0x268>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d111      	bne.n	8001d5c <HAL_I2C_Init+0x1b4>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	440b      	add	r3, r1
 8001d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	e012      	b.n	8001d82 <HAL_I2C_Init+0x1da>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e58      	subs	r0, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	0099      	lsls	r1, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Init+0x1e2>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e042      	b.n	8001e10 <HAL_I2C_Init+0x268>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12e      	bne.n	8001df0 <HAL_I2C_Init+0x248>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1e58      	subs	r0, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	440b      	add	r3, r1
 8001da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dae:	e02f      	b.n	8001e10 <HAL_I2C_Init+0x268>
 8001db0:	080020a5 	.word	0x080020a5
 8001db4:	080020b9 	.word	0x080020b9
 8001db8:	080020cd 	.word	0x080020cd
 8001dbc:	080020e1 	.word	0x080020e1
 8001dc0:	08002111 	.word	0x08002111
 8001dc4:	08002125 	.word	0x08002125
 8001dc8:	08002139 	.word	0x08002139
 8001dcc:	0800214d 	.word	0x0800214d
 8001dd0:	08002161 	.word	0x08002161
 8001dd4:	080020f5 	.word	0x080020f5
 8001dd8:	080006f9 	.word	0x080006f9
 8001ddc:	000186a0 	.word	0x000186a0
 8001de0:	001e847f 	.word	0x001e847f
 8001de4:	003d08ff 	.word	0x003d08ff
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	10624dd3 	.word	0x10624dd3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	0099      	lsls	r1, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	6809      	ldr	r1, [r1, #0]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6911      	ldr	r1, [r2, #16]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68d2      	ldr	r2, [r2, #12]
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop

08001ea8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	817b      	strh	r3, [r7, #10]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff fac2 	bl	8001444 <HAL_GetTick>
 8001ec0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	f040 80e0 	bne.w	8002090 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2319      	movs	r3, #25
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4970      	ldr	r1, [pc, #448]	@ (800209c <HAL_I2C_Master_Transmit+0x1f4>)
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f9cc 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e0d3      	b.n	8002092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2C_Master_Transmit+0x50>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e0cc      	b.n	8002092 <HAL_I2C_Master_Transmit+0x1ea>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d007      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2221      	movs	r2, #33	@ 0x21
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	893a      	ldrh	r2, [r7, #8]
 8001f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a50      	ldr	r2, [pc, #320]	@ (80020a0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f60:	8979      	ldrh	r1, [r7, #10]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f904 	bl	8002174 <I2C_MasterRequestWrite>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e08d      	b.n	8002092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f8c:	e066      	b.n	800205c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	6a39      	ldr	r1, [r7, #32]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fa8a 	bl	80024ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d107      	bne.n	8001fb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06b      	b.n	8002092 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d11b      	bne.n	8002030 <HAL_I2C_Master_Transmit+0x188>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d017      	beq.n	8002030 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	6a39      	ldr	r1, [r7, #32]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fa81 	bl	800253c <I2C_WaitOnBTFFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	2b04      	cmp	r3, #4
 8002046:	d107      	bne.n	8002058 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002056:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e01a      	b.n	8002092 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002060:	2b00      	cmp	r3, #0
 8002062:	d194      	bne.n	8001f8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002090:	2302      	movs	r3, #2
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	00100002 	.word	0x00100002
 80020a0:	ffff0000 	.word	0xffff0000

080020a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
 8002100:	4613      	mov	r3, r2
 8002102:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	460b      	mov	r3, r1
 8002182:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d006      	beq.n	800219e <I2C_MasterRequestWrite+0x2a>
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d003      	beq.n	800219e <I2C_MasterRequestWrite+0x2a>
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800219c:	d108      	bne.n	80021b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e00b      	b.n	80021c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	2b12      	cmp	r3, #18
 80021b6:	d107      	bne.n	80021c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f84f 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ee:	d103      	bne.n	80021f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e035      	b.n	8002268 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002204:	d108      	bne.n	8002218 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002214:	611a      	str	r2, [r3, #16]
 8002216:	e01b      	b.n	8002250 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002218:	897b      	ldrh	r3, [r7, #10]
 800221a:	11db      	asrs	r3, r3, #7
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0306 	and.w	r3, r3, #6
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f063 030f 	orn	r3, r3, #15
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	490e      	ldr	r1, [pc, #56]	@ (8002270 <I2C_MasterRequestWrite+0xfc>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f898 	bl	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e010      	b.n	8002268 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002246:	897b      	ldrh	r3, [r7, #10]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4907      	ldr	r1, [pc, #28]	@ (8002274 <I2C_MasterRequestWrite+0x100>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f888 	bl	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	00010008 	.word	0x00010008
 8002274:	00010002 	.word	0x00010002

08002278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	e048      	b.n	800231c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d044      	beq.n	800231c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7ff f8d7 	bl	8001444 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d139      	bne.n	800231c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d10d      	bne.n	80022ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	e00c      	b.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d116      	bne.n	800231c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e023      	b.n	8002364 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10d      	bne.n	8002342 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	43da      	mvns	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4013      	ands	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	e00c      	b.n	800235c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	43da      	mvns	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4013      	ands	r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	429a      	cmp	r2, r3
 8002360:	d093      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800237a:	e071      	b.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238a:	d123      	bne.n	80023d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800239a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f043 0204 	orr.w	r2, r3, #4
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e067      	b.n	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d041      	beq.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023dc:	f7ff f832 	bl	8001444 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d302      	bcc.n	80023f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d136      	bne.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10c      	bne.n	8002416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	e00b      	b.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	43da      	mvns	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4013      	ands	r3, r2
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d016      	beq.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e021      	b.n	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10c      	bne.n	8002484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	43da      	mvns	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4013      	ands	r3, r2
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e00b      	b.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4013      	ands	r3, r2
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f af6d 	bne.w	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024b8:	e034      	b.n	8002524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f886 	bl	80025cc <I2C_IsAcknowledgeFailed>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e034      	b.n	8002534 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d028      	beq.n	8002524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7fe ffb7 	bl	8001444 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11d      	bne.n	8002524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f2:	2b80      	cmp	r3, #128	@ 0x80
 80024f4:	d016      	beq.n	8002524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	f043 0220 	orr.w	r2, r3, #32
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e007      	b.n	8002534 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252e:	2b80      	cmp	r3, #128	@ 0x80
 8002530:	d1c3      	bne.n	80024ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002548:	e034      	b.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f83e 	bl	80025cc <I2C_IsAcknowledgeFailed>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e034      	b.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d028      	beq.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7fe ff6f 	bl	8001444 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d11d      	bne.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b04      	cmp	r3, #4
 8002584:	d016      	beq.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e007      	b.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d1c3      	bne.n	800254a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e2:	d11b      	bne.n	800261c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f043 0204 	orr.w	r2, r3, #4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b20      	cmp	r3, #32
 800263e:	d129      	bne.n	8002694 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2224      	movs	r2, #36	@ 0x24
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0210 	bic.w	r2, r2, #16
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d12a      	bne.n	8002712 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80026dc:	89fb      	ldrh	r3, [r7, #14]
 80026de:	f023 030f 	bic.w	r3, r3, #15
 80026e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	89fa      	ldrh	r2, [r7, #14]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e267      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d075      	beq.n	800282a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800273e:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b04      	cmp	r3, #4
 8002748:	d00c      	beq.n	8002764 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4b85      	ldr	r3, [pc, #532]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002752:	2b08      	cmp	r3, #8
 8002754:	d112      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002756:	4b82      	ldr	r3, [pc, #520]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002762:	d10b      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	4b7e      	ldr	r3, [pc, #504]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05b      	beq.n	8002828 <HAL_RCC_OscConfig+0x108>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d157      	bne.n	8002828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e242      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x74>
 8002786:	4b76      	ldr	r3, [pc, #472]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a75      	ldr	r2, [pc, #468]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x98>
 800279e:	4b70      	ldr	r3, [pc, #448]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 80027b8:	4b69      	ldr	r3, [pc, #420]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a68      	ldr	r2, [pc, #416]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a65      	ldr	r2, [pc, #404]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fe34 	bl	8001444 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7fe fe30 	bl	8001444 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	@ 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e207      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0xc0>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fe20 	bl	8001444 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe fe1c 	bl	8001444 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	@ 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1f3      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	4b51      	ldr	r3, [pc, #324]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0xe8>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d063      	beq.n	80028fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002836:	4b4a      	ldr	r3, [pc, #296]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800284a:	2b08      	cmp	r3, #8
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b44      	ldr	r3, [pc, #272]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x152>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1c7      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4937      	ldr	r1, [pc, #220]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e03a      	b.n	80028fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_OscConfig+0x244>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fdd5 	bl	8001444 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289e:	f7fe fdd1 	bl	8001444 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1a8      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4925      	ldr	r1, [pc, #148]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <HAL_RCC_OscConfig+0x244>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fdb4 	bl	8001444 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fdb0 	bl	8001444 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e187      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d036      	beq.n	8002978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <HAL_RCC_OscConfig+0x248>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe fd94 	bl	8001444 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe fd90 	bl	8001444 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e167      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_OscConfig+0x240>)
 8002934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x200>
 800293e:	e01b      	b.n	8002978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RCC_OscConfig+0x248>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe fd7d 	bl	8001444 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	e00e      	b.n	800296c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe fd79 	bl	8001444 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d907      	bls.n	800296c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e150      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
 8002960:	40023800 	.word	0x40023800
 8002964:	42470000 	.word	0x42470000
 8002968:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	4b88      	ldr	r3, [pc, #544]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ea      	bne.n	800294e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8097 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b81      	ldr	r3, [pc, #516]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b77      	ldr	r3, [pc, #476]	@ (8002b94 <HAL_RCC_OscConfig+0x474>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b74      	ldr	r3, [pc, #464]	@ (8002b94 <HAL_RCC_OscConfig+0x474>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a73      	ldr	r2, [pc, #460]	@ (8002b94 <HAL_RCC_OscConfig+0x474>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fd39 	bl	8001444 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe fd35 	bl	8001444 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e10c      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_OscConfig+0x474>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2ea>
 80029fc:	4b64      	ldr	r3, [pc, #400]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a63      	ldr	r2, [pc, #396]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x324>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x30c>
 8002a12:	4b5f      	ldr	r3, [pc, #380]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a5e      	ldr	r2, [pc, #376]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	4a5b      	ldr	r2, [pc, #364]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0x324>
 8002a2c:	4b58      	ldr	r3, [pc, #352]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4a57      	ldr	r2, [pc, #348]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a38:	4b55      	ldr	r3, [pc, #340]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	4a54      	ldr	r2, [pc, #336]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	f023 0304 	bic.w	r3, r3, #4
 8002a42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fcfa 	bl	8001444 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fcf6 	bl	8001444 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0cb      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	4b49      	ldr	r3, [pc, #292]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0ee      	beq.n	8002a54 <HAL_RCC_OscConfig+0x334>
 8002a76:	e014      	b.n	8002aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7fe fce4 	bl	8001444 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fce0 	bl	8001444 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0b5      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a96:	4b3e      	ldr	r3, [pc, #248]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ee      	bne.n	8002a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	4a38      	ldr	r2, [pc, #224]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a1 	beq.w	8002c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002abe:	4b34      	ldr	r3, [pc, #208]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d05c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d141      	bne.n	8002b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCC_OscConfig+0x478>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fcb4 	bl	8001444 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fcb0 	bl	8001444 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e087      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	491b      	ldr	r1, [pc, #108]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x478>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fc89 	bl	8001444 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fc85 	bl	8001444 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e05c      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x416>
 8002b54:	e054      	b.n	8002c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <HAL_RCC_OscConfig+0x478>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fc72 	bl	8001444 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fc6e 	bl	8001444 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e045      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_RCC_OscConfig+0x470>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x444>
 8002b82:	e03d      	b.n	8002c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e038      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40007000 	.word	0x40007000
 8002b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_OscConfig+0x4ec>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d028      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d121      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d11a      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bcc:	4013      	ands	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	3b01      	subs	r3, #1
 8002be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0cc      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b68      	ldr	r3, [pc, #416]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d90c      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b65      	ldr	r3, [pc, #404]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a58      	ldr	r2, [pc, #352]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a52      	ldr	r2, [pc, #328]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d044      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d119      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b3f      	ldr	r3, [pc, #252]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e067      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b37      	ldr	r3, [pc, #220]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4934      	ldr	r1, [pc, #208]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fba0 	bl	8001444 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fb9c 	bl	8001444 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e04f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d20c      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d82:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f821 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	490a      	ldr	r1, [pc, #40]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fb00 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08004144 	.word	0x08004144
 8002dd4:	20000004 	.word	0x20000004
 8002dd8:	20000018 	.word	0x20000018

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de0:	b094      	sub	sp, #80	@ 0x50
 8002de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df4:	4b79      	ldr	r3, [pc, #484]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d00d      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x40>
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	f200 80e1 	bhi.w	8002fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x34>
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e0e:	e0db      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b73      	ldr	r3, [pc, #460]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e14:	e0db      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e16:	4b73      	ldr	r3, [pc, #460]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1a:	e0d8      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e26:	4b6d      	ldr	r3, [pc, #436]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d063      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e32:	4b6a      	ldr	r3, [pc, #424]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	2200      	movs	r2, #0
 8002e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e46:	2300      	movs	r3, #0
 8002e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	0159      	lsls	r1, r3, #5
 8002e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e60:	0150      	lsls	r0, r2, #5
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4621      	mov	r1, r4
 8002e68:	1a51      	subs	r1, r2, r1
 8002e6a:	6139      	str	r1, [r7, #16]
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e80:	4659      	mov	r1, fp
 8002e82:	018b      	lsls	r3, r1, #6
 8002e84:	4651      	mov	r1, sl
 8002e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	018a      	lsls	r2, r1, #6
 8002e8e:	4651      	mov	r1, sl
 8002e90:	ebb2 0801 	subs.w	r8, r2, r1
 8002e94:	4659      	mov	r1, fp
 8002e96:	eb63 0901 	sbc.w	r9, r3, r1
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eae:	4690      	mov	r8, r2
 8002eb0:	4699      	mov	r9, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	eb18 0303 	adds.w	r3, r8, r3
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	462b      	mov	r3, r5
 8002ebc:	eb49 0303 	adc.w	r3, r9, r3
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ece:	4629      	mov	r1, r5
 8002ed0:	024b      	lsls	r3, r1, #9
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ed8:	4621      	mov	r1, r4
 8002eda:	024a      	lsls	r2, r1, #9
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eec:	f7fd f988 	bl	8000200 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef8:	e058      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efa:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	2200      	movs	r2, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	4611      	mov	r1, r2
 8002f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	f04f 0000 	mov.w	r0, #0
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	0159      	lsls	r1, r3, #5
 8002f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f26:	0150      	lsls	r0, r2, #5
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f50:	eb63 050b 	sbc.w	r5, r3, fp
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	00eb      	lsls	r3, r5, #3
 8002f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f62:	00e2      	lsls	r2, r4, #3
 8002f64:	4614      	mov	r4, r2
 8002f66:	461d      	mov	r5, r3
 8002f68:	4643      	mov	r3, r8
 8002f6a:	18e3      	adds	r3, r4, r3
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	464b      	mov	r3, r9
 8002f70:	eb45 0303 	adc.w	r3, r5, r3
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f82:	4629      	mov	r1, r5
 8002f84:	028b      	lsls	r3, r1, #10
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	028a      	lsls	r2, r1, #10
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f96:	2200      	movs	r2, #0
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	61fa      	str	r2, [r7, #28]
 8002f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fa0:	f7fd f92e 	bl	8000200 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc6:	e002      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3750      	adds	r7, #80	@ 0x50
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	007a1200 	.word	0x007a1200

08002fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b03      	ldr	r3, [pc, #12]	@ (8002ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003004:	f7ff fff0 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0a9b      	lsrs	r3, r3, #10
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	@ (8003024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	08004154 	.word	0x08004154

08003028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800302c:	f7ff ffdc 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	0b5b      	lsrs	r3, r3, #13
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4903      	ldr	r1, [pc, #12]	@ (800304c <HAL_RCC_GetPCLK2Freq+0x24>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	08004154 	.word	0x08004154

08003050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e04d      	b.n	80030fe <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d111      	bne.n	8003092 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fb58 	bl	800372c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003080:	2b00      	cmp	r3, #0
 8003082:	d102      	bne.n	800308a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a20      	ldr	r2, [pc, #128]	@ (8003108 <HAL_UART_Init+0xb8>)
 8003088:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2224      	movs	r2, #36	@ 0x24
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fd52 	bl	8003b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	08000d61 	.word	0x08000d61

0800310c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	d112      	bne.n	800314c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_UART_Receive_IT+0x26>
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e00b      	b.n	800314e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	461a      	mov	r2, r3
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fb2a 	bl	800379c <UART_Start_Receive_IT>
 8003148:	4603      	mov	r3, r0
 800314a:	e000      	b.n	800314e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b0ba      	sub	sp, #232	@ 0xe8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800319e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_UART_IRQHandler+0x66>
 80031aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fc0b 	bl	80039d2 <UART_Receive_IT>
      return;
 80031bc:	e260      	b.n	8003680 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80e1 	beq.w	800338a <HAL_UART_IRQHandler+0x232>
 80031c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80d4 	beq.w	800338a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_UART_IRQHandler+0xae>
 80031ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_UART_IRQHandler+0xd2>
 8003212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	f043 0202 	orr.w	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_UART_IRQHandler+0xf6>
 8003236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f043 0204 	orr.w	r2, r3, #4
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d011      	beq.n	800327e <HAL_UART_IRQHandler+0x126>
 800325a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	f043 0208 	orr.w	r2, r3, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 81f7 	beq.w	8003676 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_UART_IRQHandler+0x14e>
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fb96 	bl	80039d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <HAL_UART_IRQHandler+0x17a>
 80032ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d051      	beq.n	8003376 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa9c 	bl	8003810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d142      	bne.n	800336c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3314      	adds	r3, #20
 80032ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3314      	adds	r3, #20
 800330e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003312:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800331e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003322:	e841 2300 	strex	r3, r2, [r1]
 8003326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800332a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1d9      	bne.n	80032e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d013      	beq.n	8003362 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333e:	4a80      	ldr	r2, [pc, #512]	@ (8003540 <HAL_UART_IRQHandler+0x3e8>)
 8003340:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fa2d 	bl	80017a6 <HAL_DMA_Abort_IT>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d019      	beq.n	8003386 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800335c:	4610      	mov	r0, r2
 800335e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	e011      	b.n	8003386 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336a:	e00c      	b.n	8003386 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003374:	e007      	b.n	8003386 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003384:	e177      	b.n	8003676 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003386:	bf00      	nop
    return;
 8003388:	e175      	b.n	8003676 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	2b01      	cmp	r3, #1
 8003390:	f040 8151 	bne.w	8003636 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 814a 	beq.w	8003636 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8143 	beq.w	8003636 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d0:	2b40      	cmp	r3, #64	@ 0x40
 80033d2:	f040 80b7 	bne.w	8003544 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8147 	beq.w	800367a <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f080 8140 	bcs.w	800367a <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003400:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800340c:	f000 8088 	beq.w	8003520 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003426:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800342a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800342e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800343c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003440:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003448:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1d9      	bne.n	8003410 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800346c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3314      	adds	r3, #20
 800347c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003480:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003484:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003488:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003492:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e1      	bne.n	800345c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3314      	adds	r3, #20
 80034b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e3      	bne.n	8003498 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034f0:	f023 0310 	bic.w	r3, r3, #16
 80034f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003502:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003504:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003508:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e3      	bne.n	80034de <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe f8d3 	bl	80016c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8003532:	b292      	uxth	r2, r2
 8003534:	1a8a      	subs	r2, r1, r2
 8003536:	b292      	uxth	r2, r2
 8003538:	4611      	mov	r1, r2
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800353e:	e09c      	b.n	800367a <HAL_UART_IRQHandler+0x522>
 8003540:	080038d7 	.word	0x080038d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800354c:	b29b      	uxth	r3, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 808f 	beq.w	800367e <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8003560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 808a 	beq.w	800367e <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800357a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800358e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003590:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003594:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800359c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	623b      	str	r3, [r7, #32]
   return(result);
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3314      	adds	r3, #20
 80035c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800360c:	61fa      	str	r2, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	617b      	str	r3, [r7, #20]
   return(result);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e3      	bne.n	80035e8 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800362e:	4611      	mov	r1, r2
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003634:	e023      	b.n	800367e <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800363a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_UART_IRQHandler+0x4fe>
 8003642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f956 	bl	8003900 <UART_Transmit_IT>
    return;
 8003654:	e014      	b.n	8003680 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00e      	beq.n	8003680 <HAL_UART_IRQHandler+0x528>
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f996 	bl	80039a0 <UART_EndTransmit_IT>
    return;
 8003674:	e004      	b.n	8003680 <HAL_UART_IRQHandler+0x528>
    return;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <HAL_UART_IRQHandler+0x528>
      return;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <HAL_UART_IRQHandler+0x528>
      return;
 800367e:	bf00      	nop
  }
}
 8003680:	37e8      	adds	r7, #232	@ 0xe8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop

08003688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a10      	ldr	r2, [pc, #64]	@ (8003778 <UART_InitCallbacksToDefault+0x4c>)
 8003738:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a0f      	ldr	r2, [pc, #60]	@ (800377c <UART_InitCallbacksToDefault+0x50>)
 800373e:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a0f      	ldr	r2, [pc, #60]	@ (8003780 <UART_InitCallbacksToDefault+0x54>)
 8003744:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a0e      	ldr	r2, [pc, #56]	@ (8003784 <UART_InitCallbacksToDefault+0x58>)
 800374a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0e      	ldr	r2, [pc, #56]	@ (8003788 <UART_InitCallbacksToDefault+0x5c>)
 8003750:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a0d      	ldr	r2, [pc, #52]	@ (800378c <UART_InitCallbacksToDefault+0x60>)
 8003756:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <UART_InitCallbacksToDefault+0x64>)
 800375c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <UART_InitCallbacksToDefault+0x68>)
 8003762:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0c      	ldr	r2, [pc, #48]	@ (8003798 <UART_InitCallbacksToDefault+0x6c>)
 8003768:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	0800369d 	.word	0x0800369d
 800377c:	08003689 	.word	0x08003689
 8003780:	080036b1 	.word	0x080036b1
 8003784:	08000789 	.word	0x08000789
 8003788:	080036c5 	.word	0x080036c5
 800378c:	080036d9 	.word	0x080036d9
 8003790:	080036ed 	.word	0x080036ed
 8003794:	08003701 	.word	0x08003701
 8003798:	08003715 	.word	0x08003715

0800379c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	88fa      	ldrh	r2, [r7, #6]
 80037b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2222      	movs	r2, #34	@ 0x22
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0220 	orr.w	r2, r2, #32
 8003800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b095      	sub	sp, #84	@ 0x54
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800382e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003838:	643a      	str	r2, [r7, #64]	@ 0x40
 800383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800383e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e5      	bne.n	8003818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3314      	adds	r3, #20
 8003852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	61fb      	str	r3, [r7, #28]
   return(result);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3314      	adds	r3, #20
 800386a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800386c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800386e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003884:	2b01      	cmp	r3, #1
 8003886:	d119      	bne.n	80038bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	60bb      	str	r3, [r7, #8]
   return(result);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f023 0310 	bic.w	r3, r3, #16
 800389e:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	330c      	adds	r3, #12
 80038a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038a8:	61ba      	str	r2, [r7, #24]
 80038aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6979      	ldr	r1, [r7, #20]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	613b      	str	r3, [r7, #16]
   return(result);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e5      	bne.n	8003888 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038ca:	bf00      	nop
 80038cc:	3754      	adds	r7, #84	@ 0x54
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b21      	cmp	r3, #33	@ 0x21
 8003912:	d13e      	bne.n	8003992 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391c:	d114      	bne.n	8003948 <UART_Transmit_IT+0x48>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d110      	bne.n	8003948 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]
 8003946:	e008      	b.n	800395a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	1c59      	adds	r1, r3, #1
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6211      	str	r1, [r2, #32]
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10f      	bne.n	800398e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800397c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800398c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08c      	sub	sp, #48	@ 0x30
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b22      	cmp	r3, #34	@ 0x22
 80039e4:	f040 80b0 	bne.w	8003b48 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f0:	d117      	bne.n	8003a22 <UART_Receive_IT+0x50>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d113      	bne.n	8003a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	1c9a      	adds	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a20:	e026      	b.n	8003a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a34:	d007      	beq.n	8003a46 <UART_Receive_IT+0x74>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <UART_Receive_IT+0x82>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e008      	b.n	8003a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d15f      	bne.n	8003b44 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0220 	bic.w	r2, r2, #32
 8003a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d136      	bne.n	8003b38 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af0:	623a      	str	r2, [r7, #32]
 8003af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	69f9      	ldr	r1, [r7, #28]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d10a      	bne.n	8003b28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8003b30:	4611      	mov	r1, r2
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
 8003b36:	e003      	b.n	8003b40 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e002      	b.n	8003b4a <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e000      	b.n	8003b4a <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
  }
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3730      	adds	r7, #48	@ 0x30
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b0c0      	sub	sp, #256	@ 0x100
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	68d9      	ldr	r1, [r3, #12]
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	ea40 0301 	orr.w	r3, r0, r1
 8003b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bac:	f021 010c 	bic.w	r1, r1, #12
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bce:	6999      	ldr	r1, [r3, #24]
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	ea40 0301 	orr.w	r3, r0, r1
 8003bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d005      	beq.n	8003bf4 <UART_SetConfig+0xa0>
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <UART_SetConfig+0x2d0>)
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d104      	bne.n	8003bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7ff fa18 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 8003bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bfc:	e003      	b.n	8003c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bfe:	f7ff f9ff 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8003c02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c10:	f040 810c 	bne.w	8003e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	1891      	adds	r1, r2, r2
 8003c2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c2e:	415b      	adcs	r3, r3
 8003c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c36:	4621      	mov	r1, r4
 8003c38:	eb12 0801 	adds.w	r8, r2, r1
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	eb43 0901 	adc.w	r9, r3, r1
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c56:	4690      	mov	r8, r2
 8003c58:	4699      	mov	r9, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	eb18 0303 	adds.w	r3, r8, r3
 8003c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c64:	462b      	mov	r3, r5
 8003c66:	eb49 0303 	adc.w	r3, r9, r3
 8003c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c82:	460b      	mov	r3, r1
 8003c84:	18db      	adds	r3, r3, r3
 8003c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c88:	4613      	mov	r3, r2
 8003c8a:	eb42 0303 	adc.w	r3, r2, r3
 8003c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c98:	f7fc fab2 	bl	8000200 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4b61      	ldr	r3, [pc, #388]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	011c      	lsls	r4, r3, #4
 8003caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ccc:	4641      	mov	r1, r8
 8003cce:	eb12 0a01 	adds.w	sl, r2, r1
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cec:	4692      	mov	sl, r2
 8003cee:	469b      	mov	fp, r3
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8003cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8003d00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	18db      	adds	r3, r3, r3
 8003d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d1e:	4613      	mov	r3, r2
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d2e:	f7fc fa67 	bl	8000200 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2264      	movs	r2, #100	@ 0x64
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	1acb      	subs	r3, r1, r3
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d4e:	4b36      	ldr	r3, [pc, #216]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003d50:	fba3 2302 	umull	r2, r3, r3, r2
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d5c:	441c      	add	r4, r3
 8003d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d70:	4642      	mov	r2, r8
 8003d72:	464b      	mov	r3, r9
 8003d74:	1891      	adds	r1, r2, r2
 8003d76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d78:	415b      	adcs	r3, r3
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d80:	4641      	mov	r1, r8
 8003d82:	1851      	adds	r1, r2, r1
 8003d84:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d86:	4649      	mov	r1, r9
 8003d88:	414b      	adcs	r3, r1
 8003d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d98:	4659      	mov	r1, fp
 8003d9a:	00cb      	lsls	r3, r1, #3
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da2:	4651      	mov	r1, sl
 8003da4:	00ca      	lsls	r2, r1, #3
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	4642      	mov	r2, r8
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003db4:	464b      	mov	r3, r9
 8003db6:	460a      	mov	r2, r1
 8003db8:	eb42 0303 	adc.w	r3, r2, r3
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	18db      	adds	r3, r3, r3
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dda:	4613      	mov	r3, r2
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dea:	f7fc fa09 	bl	8000200 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003df4:	fba3 1302 	umull	r1, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	2164      	movs	r1, #100	@ 0x64
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	3332      	adds	r3, #50	@ 0x32
 8003e06:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	f003 0207 	and.w	r2, r3, #7
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4422      	add	r2, r4
 8003e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e1c:	e106      	b.n	800402c <UART_SetConfig+0x4d8>
 8003e1e:	bf00      	nop
 8003e20:	40011000 	.word	0x40011000
 8003e24:	40011400 	.word	0x40011400
 8003e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e3e:	4642      	mov	r2, r8
 8003e40:	464b      	mov	r3, r9
 8003e42:	1891      	adds	r1, r2, r2
 8003e44:	6239      	str	r1, [r7, #32]
 8003e46:	415b      	adcs	r3, r3
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e4e:	4641      	mov	r1, r8
 8003e50:	1854      	adds	r4, r2, r1
 8003e52:	4649      	mov	r1, r9
 8003e54:	eb43 0501 	adc.w	r5, r3, r1
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	00eb      	lsls	r3, r5, #3
 8003e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e66:	00e2      	lsls	r2, r4, #3
 8003e68:	4614      	mov	r4, r2
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	18e3      	adds	r3, r4, r3
 8003e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e74:	464b      	mov	r3, r9
 8003e76:	eb45 0303 	adc.w	r3, r5, r3
 8003e7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	008b      	lsls	r3, r1, #2
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	008a      	lsls	r2, r1, #2
 8003ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003eac:	f7fc f9a8 	bl	8000200 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4b60      	ldr	r3, [pc, #384]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	011c      	lsls	r4, r3, #4
 8003ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ec8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	1891      	adds	r1, r2, r2
 8003ed6:	61b9      	str	r1, [r7, #24]
 8003ed8:	415b      	adcs	r3, r3
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	1851      	adds	r1, r2, r1
 8003ee4:	6139      	str	r1, [r7, #16]
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	414b      	adcs	r3, r1
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef8:	4659      	mov	r1, fp
 8003efa:	00cb      	lsls	r3, r1, #3
 8003efc:	4651      	mov	r1, sl
 8003efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f02:	4651      	mov	r1, sl
 8003f04:	00ca      	lsls	r2, r1, #3
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f14:	464b      	mov	r3, r9
 8003f16:	460a      	mov	r2, r1
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f38:	4649      	mov	r1, r9
 8003f3a:	008b      	lsls	r3, r1, #2
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f42:	4641      	mov	r1, r8
 8003f44:	008a      	lsls	r2, r1, #2
 8003f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f4a:	f7fc f959 	bl	8000200 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	4b38      	ldr	r3, [pc, #224]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003f56:	fba3 2301 	umull	r2, r3, r3, r1
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2264      	movs	r2, #100	@ 0x64
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	1acb      	subs	r3, r1, r3
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	3332      	adds	r3, #50	@ 0x32
 8003f68:	4a33      	ldr	r2, [pc, #204]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f74:	441c      	add	r4, r3
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f84:	4642      	mov	r2, r8
 8003f86:	464b      	mov	r3, r9
 8003f88:	1891      	adds	r1, r2, r2
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	415b      	adcs	r3, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f94:	4641      	mov	r1, r8
 8003f96:	1851      	adds	r1, r2, r1
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	414b      	adcs	r3, r1
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fac:	4659      	mov	r1, fp
 8003fae:	00cb      	lsls	r3, r1, #3
 8003fb0:	4651      	mov	r1, sl
 8003fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	00ca      	lsls	r2, r1, #3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	460a      	mov	r2, r1
 8003fca:	eb42 0303 	adc.w	r3, r2, r3
 8003fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fda:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fe8:	4649      	mov	r1, r9
 8003fea:	008b      	lsls	r3, r1, #2
 8003fec:	4641      	mov	r1, r8
 8003fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	008a      	lsls	r2, r1, #2
 8003ff6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ffa:	f7fc f901 	bl	8000200 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <UART_SetConfig+0x4e4>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	@ 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	3332      	adds	r3, #50	@ 0x32
 8004016:	4a08      	ldr	r2, [pc, #32]	@ (8004038 <UART_SetConfig+0x4e4>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4422      	add	r2, r4
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004032:	46bd      	mov	sp, r7
 8004034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004038:	51eb851f 	.word	0x51eb851f

0800403c <memset>:
 800403c:	4402      	add	r2, r0
 800403e:	4603      	mov	r3, r0
 8004040:	4293      	cmp	r3, r2
 8004042:	d100      	bne.n	8004046 <memset+0xa>
 8004044:	4770      	bx	lr
 8004046:	f803 1b01 	strb.w	r1, [r3], #1
 800404a:	e7f9      	b.n	8004040 <memset+0x4>

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4d0d      	ldr	r5, [pc, #52]	@ (8004084 <__libc_init_array+0x38>)
 8004050:	4c0d      	ldr	r4, [pc, #52]	@ (8004088 <__libc_init_array+0x3c>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	2600      	movs	r6, #0
 8004058:	42a6      	cmp	r6, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	4d0b      	ldr	r5, [pc, #44]	@ (800408c <__libc_init_array+0x40>)
 800405e:	4c0c      	ldr	r4, [pc, #48]	@ (8004090 <__libc_init_array+0x44>)
 8004060:	f000 f818 	bl	8004094 <_init>
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	2600      	movs	r6, #0
 800406a:	42a6      	cmp	r6, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	f855 3b04 	ldr.w	r3, [r5], #4
 8004074:	4798      	blx	r3
 8004076:	3601      	adds	r6, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	f855 3b04 	ldr.w	r3, [r5], #4
 800407e:	4798      	blx	r3
 8004080:	3601      	adds	r6, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	08004164 	.word	0x08004164
 8004088:	08004164 	.word	0x08004164
 800408c:	08004164 	.word	0x08004164
 8004090:	08004168 	.word	0x08004168

08004094 <_init>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr

080040a0 <_fini>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr
